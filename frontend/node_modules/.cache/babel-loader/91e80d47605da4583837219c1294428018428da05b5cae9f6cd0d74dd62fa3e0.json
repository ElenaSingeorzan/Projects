{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nexport default {\n  methods: {\n    getUserInfo() {\n      const token = localStorage.getItem(\"jwtToken\"); // Obține token-ul din localStorage\n\n      if (!token) {\n        console.error(\"Token-ul JWT lipsește!\");\n        return null;\n      }\n      try {\n        const decodedToken = jwtDecode(token); // Decodează token-ul\n        const userId = decodedToken.userId; // Extrage userId\n        const username = decodedToken.sub; // Extrage username-ul (dacă sub=subject este folosit pentru username)\n        localStorage.setItem(\"userId\", userId);\n        localStorage.setItem(\"username\", username);\n        console.log(\"User ID:\", userId);\n        console.log(\"Username:\", username);\n        return {\n          userId,\n          username\n        }; // Returnează informațiile\n      } catch (error) {\n        console.error(\"Eroare la decodarea JWT-ului:\", error);\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["jwtDecode","methods","getUserInfo","token","localStorage","getItem","console","error","decodedToken","userId","username","sub","setItem","log"],"sources":["C:/Users/Elena/Desktop/an4/sem1/SCD/Proiect/frontend/src/services/info.js"],"sourcesContent":["import jwtDecode from \"jwt-decode\";\r\n\r\nexport default {\r\n  methods: {\r\n    getUserInfo() {\r\n      const token = localStorage.getItem(\"jwtToken\"); // Obține token-ul din localStorage\r\n\r\n      if (!token) {\r\n        console.error(\"Token-ul JWT lipsește!\");\r\n        return null;\r\n      }\r\n\r\n      try {\r\n        const decodedToken = jwtDecode(token); // Decodează token-ul\r\n        const userId = decodedToken.userId; // Extrage userId\r\n        const username = decodedToken.sub; // Extrage username-ul (dacă sub=subject este folosit pentru username)\r\n        localStorage.setItem(\"userId\",userId);\r\n        localStorage.setItem(\"username\",username);\r\n        console.log(\"User ID:\", userId);\r\n        console.log(\"Username:\", username);\r\n\r\n        return { userId, username }; // Returnează informațiile\r\n      } catch (error) {\r\n        console.error(\"Eroare la decodarea JWT-ului:\", error);\r\n        return null;\r\n      }\r\n    },\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAElC,eAAe;EACbC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;MAEhD,IAAI,CAACF,KAAK,EAAE;QACVG,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;QACvC,OAAO,IAAI;MACb;MAEA,IAAI;QACF,MAAMC,YAAY,GAAGR,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC;QACvC,MAAMM,MAAM,GAAGD,YAAY,CAACC,MAAM,CAAC,CAAC;QACpC,MAAMC,QAAQ,GAAGF,YAAY,CAACG,GAAG,CAAC,CAAC;QACnCP,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAACH,MAAM,CAAC;QACrCL,YAAY,CAACQ,OAAO,CAAC,UAAU,EAACF,QAAQ,CAAC;QACzCJ,OAAO,CAACO,GAAG,CAAC,UAAU,EAAEJ,MAAM,CAAC;QAC/BH,OAAO,CAACO,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAAC;QAElC,OAAO;UAAED,MAAM;UAAEC;QAAS,CAAC,CAAC,CAAC;MAC/B,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,OAAO,IAAI;MACb;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}