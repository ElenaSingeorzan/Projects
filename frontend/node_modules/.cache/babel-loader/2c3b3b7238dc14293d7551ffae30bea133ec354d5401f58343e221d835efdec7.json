{"ast":null,"code":"import { getPosts } from '../services/api'; // Importă funcția specifică\n\nexport default {\n  data() {\n    return {\n      posts: [],\n      message: ''\n    };\n  },\n  methods: {\n    fetchPosts() {\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\n\n      // if (token) {\n      //   getPosts(token) // Trimite token-ul în cerere\n      //     .then(response => {\n      //       this.posts = response.data; // Setează postările obținute\n      //     })\n      //     .catch(error => {\n      //       console.error('Eroare la preluarea postărilor:', error);\n      //     });\n      // } else {\n      //   console.error('Token-ul nu este disponibil');\n      // }\n      if (token) {\n        getPosts(token) // Trimite token-ul în cerere\n        .then(response => {\n          this.posts = response.data.map(post => {\n            // Adăugăm un atribut pentru a controla afișarea detaliilor\n            post.showDetails = false;\n            return post;\n          });\n        }).catch(error => {\n          console.error('Eroare la preluarea postărilor:', error);\n          this.message = 'Nu am putut încărca postările.';\n        });\n      } else {\n        console.error('Token-ul nu este disponibil');\n        this.message = 'Te rog să te loghezi pentru a vizualiza postările.';\n      }\n    },\n    // Funcția pentru a arăta sau ascunde detaliile postării (conținut și comentarii)\n    toggleDetails(postId) {\n      const post = this.posts.find(p => p.id === postId);\n      if (post) {\n        post.showDetails = !post.showDetails; // Schimbă starea detaliilor\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts(); // Apelează fetchPosts atunci când componenta este montată\n  }\n};","map":{"version":3,"names":["getPosts","data","posts","message","methods","fetchPosts","token","localStorage","getItem","then","response","map","post","showDetails","catch","error","console","toggleDetails","postId","find","p","id","mounted"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Lista Postări</h1>\r\n    <!-- <ul>\r\n      <li v-for=\"post in posts\" :key=\"post.id\">{{ post.title }}</li>\r\n    </ul> -->\r\n    <div v-for=\"post in posts\" :key=\"post.id\" class=\"post\">\r\n      <h3 @click=\"toggleDetails(post.id)\">\r\n        {{ post.title }} - <small>Creata de: {{ post.user.name }}</small>\r\n      </h3>\r\n      \r\n      <!-- Detalii postare - Conținut și comentarii -->\r\n      <div v-if=\"post.showDetails\">\r\n        <p>{{ post.content }}</p>\r\n        <h4>Comentarii:</h4>\r\n        <ul>\r\n          <li v-for=\"comment in post.comments\" :key=\"comment.id\">\r\n            <strong>{{ comment.user.name }}:</strong> {{ comment.content }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <!-- Mesaj de eroare -->\r\n    <p v-if=\"message\">{{ message }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getPosts } from '../services/api'; // Importă funcția specifică\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      posts: [],\r\n      message: '',\r\n    };\r\n  },\r\n  methods: {\r\n  fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n\r\n      // if (token) {\r\n      //   getPosts(token) // Trimite token-ul în cerere\r\n      //     .then(response => {\r\n      //       this.posts = response.data; // Setează postările obținute\r\n      //     })\r\n      //     .catch(error => {\r\n      //       console.error('Eroare la preluarea postărilor:', error);\r\n      //     });\r\n      // } else {\r\n      //   console.error('Token-ul nu este disponibil');\r\n      // }\r\n      if (token) {\r\n        getPosts(token) // Trimite token-ul în cerere\r\n          .then(response => {\r\n            this.posts = response.data.map(post => {\r\n              // Adăugăm un atribut pentru a controla afișarea detaliilor\r\n              post.showDetails = false;\r\n              return post;\r\n            });\r\n          })\r\n          .catch(error => {\r\n            console.error('Eroare la preluarea postărilor:', error);\r\n            this.message = 'Nu am putut încărca postările.';\r\n          });\r\n      } else {\r\n        console.error('Token-ul nu este disponibil');\r\n        this.message = 'Te rog să te loghezi pentru a vizualiza postările.';\r\n      }\r\n    },\r\n // Funcția pentru a arăta sau ascunde detaliile postării (conținut și comentarii)\r\n toggleDetails(postId) {\r\n      const post = this.posts.find(p => p.id === postId);\r\n      if (post) {\r\n        post.showDetails = !post.showDetails; // Schimbă starea detaliilor\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchPosts(); // Apelează fetchPosts atunci când componenta este montată\r\n  }\r\n  }\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Stiluri pentru a arăta postările și detaliile acestora */\r\n.post {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nh3 {\r\n  cursor: pointer;\r\n  color: #007BFF;\r\n}\r\n\r\nh3:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nsmall {\r\n  font-size: 0.9em;\r\n  color: gray;\r\n}\r\n\r\np {\r\n  font-size: 1.1em;\r\n}\r\n\r\nh4 {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"AA4BA,SAASA,QAAO,QAAS,iBAAiB,EAAE;;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACTC,UAAUA,CAAA,EAAG;MACT,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,EAAE;;MAEhD;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAIF,KAAK,EAAE;QACTN,QAAQ,CAACM,KAAK,EAAE;QAAA,CACbG,IAAI,CAACC,QAAO,IAAK;UAChB,IAAI,CAACR,KAAI,GAAIQ,QAAQ,CAACT,IAAI,CAACU,GAAG,CAACC,IAAG,IAAK;YACrC;YACAA,IAAI,CAACC,WAAU,GAAI,KAAK;YACxB,OAAOD,IAAI;UACb,CAAC,CAAC;QACJ,CAAC,EACAE,KAAK,CAACC,KAAI,IAAK;UACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;UACvD,IAAI,CAACZ,OAAM,GAAI,gCAAgC;QACjD,CAAC,CAAC;MACN,OAAO;QACLa,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAC;QAC5C,IAAI,CAACZ,OAAM,GAAI,oDAAoD;MACrE;IACF,CAAC;IACJ;IACAc,aAAaA,CAACC,MAAM,EAAE;MACjB,MAAMN,IAAG,GAAI,IAAI,CAACV,KAAK,CAACiB,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMH,MAAM,CAAC;MAClD,IAAIN,IAAI,EAAE;QACRA,IAAI,CAACC,WAAU,GAAI,CAACD,IAAI,CAACC,WAAW,EAAE;MACxC;IACF;EACF,CAAC;EACDS,OAAOA,CAAA,EAAG;IACR,IAAI,CAACjB,UAAU,CAAC,CAAC,EAAE;EACrB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}