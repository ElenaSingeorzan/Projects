{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Lista Postări\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: post.id\n    }, _toDisplayString(post.title), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","posts","post","key","id","title"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Lista Postări</h1>\r\n    <ul>\r\n      <li v-for=\"post in posts\" :key=\"post.id\">{{ post.title }}</li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getPosts } from '../services/api'; // Importă funcția specifică\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      posts: [],\r\n    };\r\n  },\r\n  methods: {\r\n  //   fetchPosts() {\r\n  //     getPosts()\r\n  //       .then(response => {\r\n  //         this.posts = response.data;\r\n  //       })\r\n  //       .catch(error => {\r\n  //         console.error('Eroare la preluarea postărilor:', error);\r\n  //       });\r\n  //   }\r\n  // },\r\n  // mounted() {\r\n  //   this.fetchPosts();\r\n  fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n\r\n      if (token) {\r\n        getPosts(token) // Trimite token-ul în cerere\r\n          .then(response => {\r\n            this.posts = response.data; // Setează postările obținute\r\n          })\r\n          .catch(error => {\r\n            console.error('Eroare la preluarea postărilor:', error);\r\n          });\r\n      } else {\r\n        console.error('Token-ul nu este disponibil');\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchPosts(); // Apelează fetchPosts atunci când componenta este montată\r\n  }\r\n  }\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Stilurile pentru component */\r\n</style>\r\n"],"mappings":";;uBACEA,mBAAA,CAKM,c,0BAJJC,mBAAA,CAAsB,YAAlB,eAAa,sBACjBA,mBAAA,CAEK,c,kBADHD,mBAAA,CAA8DE,SAAA,QAJpEC,WAAA,CAIyBC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfN,mBAAA,CAA8D;MAAnCO,GAAG,EAAED,IAAI,CAACE;wBAAOF,IAAI,CAACG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}