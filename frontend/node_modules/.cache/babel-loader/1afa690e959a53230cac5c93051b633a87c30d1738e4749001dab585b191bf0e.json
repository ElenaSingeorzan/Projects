{"ast":null,"code":"import { getPostsforUser, updatePost, deletePost } from \"../services/api\";\nexport default {\n  components: {\n    PostCard: () => import(\"./PostCard.vue\") // Componentă pentru fiecare postare\n  },\n  data() {\n    return {\n      posts: [] // Lista postărilor\n    };\n  },\n  methods: {\n    fetchPosts() {\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        console.error('Eroare: userId lipsește din localStorage.');\n        return;\n      }\n      getPostsforUser(token).then(response => {\n        this.posts = response.data;\n      }).catch(error => {\n        console.error('Eroare la preluarea postărilor:', error);\n      });\n    },\n    handleUpdatePost(post) {\n      const token = localStorage.getItem(\"jwtToken\");\n      try {\n        updatePost(post.id, post, token);\n        alert(\"Postare actualizată!\");\n        this.fetchPosts(); // Reîncarcă lista\n      } catch (error) {\n        console.error(\"Eroare la actualizarea postării:\", error);\n      }\n    },\n    handleRemovePost(postId) {\n      const token = localStorage.getItem(\"jwtToken\");\n      try {\n        deletePost(postId, token);\n        alert(\"Postare ștearsă!\");\n        this.fetchPosts(); // Reîncarcă lista\n      } catch (error) {\n        console.error(\"Eroare la ștergerea postării:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts(); // Încarcă postările la montare\n  }\n};","map":{"version":3,"names":["getPostsforUser","updatePost","deletePost","components","PostCard","data","posts","methods","fetchPosts","token","localStorage","getItem","userId","console","error","then","response","catch","handleUpdatePost","post","id","alert","handleRemovePost","postId","mounted"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\UsersPosts.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>My Posts</h1>\r\n      <PostCard\r\n        v-for=\"post in posts\"\r\n        :key=\"post.id\"\r\n        :post=\"post\"\r\n        @update-post=\"handleUpdatePost\"\r\n        @remove-post=\"handleRemovePost\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { getPostsforUser, updatePost, deletePost } from \"../services/api\";\r\n  \r\n  export default {\r\n    components: {\r\n      PostCard: () => import(\"./PostCard.vue\"), // Componentă pentru fiecare postare\r\n    },\r\n    data() {\r\n      return {\r\n        posts: [], // Lista postărilor\r\n      };\r\n    },\r\n    methods: {\r\n        fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n      const userId = localStorage.getItem('userId');\r\n\r\n      if (!userId) {\r\n        console.error('Eroare: userId lipsește din localStorage.');\r\n        return;\r\n      }\r\n\r\n      getPostsforUser(token)\r\n        .then(response => {\r\n          this.posts = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Eroare la preluarea postărilor:', error);\r\n        });\r\n    },\r\n       handleUpdatePost(post) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n         updatePost(post.id, post, token);\r\n          alert(\"Postare actualizată!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la actualizarea postării:\", error);\r\n        }\r\n      },\r\n       handleRemovePost(postId) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n           deletePost(postId, token);\r\n          alert(\"Postare ștearsă!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la ștergerea postării:\", error);\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.fetchPosts(); // Încarcă postările la montare\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":"AAcE,SAASA,eAAe,EAAEC,UAAU,EAAEC,UAAS,QAAS,iBAAiB;AAEzE,eAAe;EACbC,UAAU,EAAE;IACVC,QAAQ,EAAEA,CAAA,KAAM,MAAM,CAAC,gBAAgB,CAAC,CAAE;EAC5C,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE,CAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACLC,UAAUA,CAAA,EAAG;MACf,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,EAAE;MAChD,MAAMC,MAAK,GAAIF,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAE7C,IAAI,CAACC,MAAM,EAAE;QACXC,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;QAC1D;MACF;MAEAd,eAAe,CAACS,KAAK,EAClBM,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACV,KAAI,GAAIU,QAAQ,CAACX,IAAI;MAC5B,CAAC,EACAY,KAAK,CAACH,KAAI,IAAK;QACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD,CAAC,CAAC;IACN,CAAC;IACEI,gBAAgBA,CAACC,IAAI,EAAE;MACtB,MAAMV,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,IAAI;QACHV,UAAU,CAACkB,IAAI,CAACC,EAAE,EAAED,IAAI,EAAEV,KAAK,CAAC;QAC/BY,KAAK,CAAC,sBAAsB,CAAC;QAC7B,IAAI,CAACb,UAAU,CAAC,CAAC,EAAE;MACrB,EAAE,OAAOM,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IACAQ,gBAAgBA,CAACC,MAAM,EAAE;MACxB,MAAMd,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,IAAI;QACDT,UAAU,CAACqB,MAAM,EAAEd,KAAK,CAAC;QAC1BY,KAAK,CAAC,kBAAkB,CAAC;QACzB,IAAI,CAACb,UAAU,CAAC,CAAC,EAAE;MACrB,EAAE,OAAOM,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;EACF,CAAC;EACDU,OAAOA,CAAA,EAAG;IACR,IAAI,CAAChB,UAAU,CAAC,CAAC,EAAE;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}