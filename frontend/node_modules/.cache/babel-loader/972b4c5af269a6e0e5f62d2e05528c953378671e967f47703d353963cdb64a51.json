{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PostCard = _resolveComponent(\"PostCard\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"My Posts\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createBlock(_component_PostCard, {\n      key: post.id,\n      post: post,\n      onUpdatePost: $options.handleUpdatePost,\n      onRemovePost: $options.handleRemovePost\n    }, null, 8 /* PROPS */, [\"post\", \"onUpdatePost\", \"onRemovePost\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","posts","post","_createBlock","_component_PostCard","key","id","onUpdatePost","$options","handleUpdatePost","onRemovePost","handleRemovePost"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\UsersPosts.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>My Posts</h1>\r\n      <PostCard\r\n        v-for=\"post in posts\"\r\n        :key=\"post.id\"\r\n        :post=\"post\"\r\n        @update-post=\"handleUpdatePost\"\r\n        @remove-post=\"handleRemovePost\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { getPostsforUser, updatePost, deletePost } from \"../services/api\";\r\n  \r\n  export default {\r\n    components: {\r\n      PostCard: () => import(\"./PostCard.vue\"), // Componentă pentru fiecare postare\r\n    },\r\n    data() {\r\n      return {\r\n        posts: [], // Lista postărilor\r\n      };\r\n    },\r\n    methods: {\r\n        fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n      const userId = localStorage.getItem('userId');\r\n\r\n      if (!userId) {\r\n        console.error('Eroare: userId lipsește din localStorage.');\r\n        return;\r\n      }\r\n\r\n      getPostsforUser(token)\r\n        .then(response => {\r\n          this.posts = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Eroare la preluarea postărilor:', error);\r\n        });\r\n    },\r\n       handleUpdatePost(post) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n         updatePost(post.id, post, token);\r\n          alert(\"Postare actualizată!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la actualizarea postării:\", error);\r\n        }\r\n      },\r\n       handleRemovePost(postId) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n           deletePost(postId, token);\r\n          alert(\"Postare ștearsă!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la ștergerea postării:\", error);\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.fetchPosts(); // Încarcă postările la montare\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";;;uBACIA,mBAAA,CASM,c,0BARJC,mBAAA,CAAiB,YAAb,UAAQ,uB,kBACZD,mBAAA,CAMEE,SAAA,QATRC,WAAA,CAIuBC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBADbC,YAAA,CAMEC,mBAAA;MAJCC,GAAG,EAAEH,IAAI,CAACI,EAAE;MACZJ,IAAI,EAAEA,IAAI;MACVK,YAAW,EAAEC,QAAA,CAAAC,gBAAgB;MAC7BC,YAAW,EAAEF,QAAA,CAAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}