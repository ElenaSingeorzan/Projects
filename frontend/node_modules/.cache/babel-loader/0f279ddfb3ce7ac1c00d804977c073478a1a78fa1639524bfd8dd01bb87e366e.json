{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { loginUser as apiLoginUser } from '../services/api';\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      message: ''\n    };\n  },\n  methods: {\n    loginUser() {\n      const login = {\n        email: this.email,\n        password: this.password\n      };\n      apiLoginUser(login).then(response => {\n        console.log(\"Autentificare reusita\", response.data);\n        // Salvează token-ul în localStorage\n        localStorage.setItem('jwtToken', response.data);\n        //getUserInfo()\n        // localStorage.setItem(\"userId\", userId); \n        this.message = \"Autentificare reușită!\";\n        this.$router.push('/');\n        // Redirecționează utilizatorul sau fă alte acțiuni\n      }).catch(error => {\n        console.error(\"Eroare la autentificare\", error);\n        this.message = \"Autentificare eșuată! Verifică email-ul și parola.\";\n      });\n    },\n    getUserInfo() {\n      const token = localStorage.getItem(\"jwtToken\"); // Obține token-ul din localStorage\n\n      if (!token) {\n        console.error(\"Token-ul JWT lipsește!\");\n        return null;\n      }\n      try {\n        const decodedToken = jwtDecode(token); // Decodează token-ul\n        const userId = decodedToken.userId; // Extrage userId\n        const username = decodedToken.sub; // Extrage username-ul (dacă sub=subject este folosit pentru username)\n        localStorage.setItem(\"userId\", userId);\n        localStorage.setItem(\"username\", username);\n        console.log(\"User ID:\", userId);\n        console.log(\"Username:\", username);\n        return {\n          userId,\n          username\n        }; // Returnează informațiile\n      } catch (error) {\n        console.error(\"Eroare la decodarea JWT-ului:\", error);\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["loginUser","apiLoginUser","data","email","password","message","methods","login","then","response","console","log","localStorage","setItem","$router","push","catch","error","getUserInfo","token","getItem","decodedToken","jwtDecode","userId","username","sub"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\UserLogin.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Login</h2>\r\n    <form @submit.prevent=\"loginUser\">\r\n      <div>\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"email\" v-model=\"email\" required />\r\n      </div>\r\n      <div>\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" v-model=\"password\" required />\r\n      </div>\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n    <p v-if=\"message\">{{ message }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { loginUser as apiLoginUser } from '../services/api';\r\nexport default {\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      message: ''\r\n    };\r\n  },\r\n  methods: {\r\n    loginUser() {\r\n      const login = {\r\n        email: this.email,\r\n        password: this.password\r\n      };\r\n      apiLoginUser(login)\r\n        .then(response => {\r\n          console.log(\"Autentificare reusita\", response.data);\r\n          // Salvează token-ul în localStorage\r\n          localStorage.setItem('jwtToken', response.data);\r\n          //getUserInfo()\r\n         // localStorage.setItem(\"userId\", userId); \r\n          this.message = \"Autentificare reușită!\";\r\n          this.$router.push('/');\r\n          // Redirecționează utilizatorul sau fă alte acțiuni\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Eroare la autentificare\", error);\r\n          this.message = \"Autentificare eșuată! Verifică email-ul și parola.\";\r\n        });\r\n    },\r\n    getUserInfo() {\r\n      const token = localStorage.getItem(\"jwtToken\"); // Obține token-ul din localStorage\r\n\r\n      if (!token) {\r\n        console.error(\"Token-ul JWT lipsește!\");\r\n        return null;\r\n      }\r\n\r\n      try {\r\n        const decodedToken = jwtDecode(token); // Decodează token-ul\r\n        const userId = decodedToken.userId; // Extrage userId\r\n        const username = decodedToken.sub; // Extrage username-ul (dacă sub=subject este folosit pentru username)\r\n        localStorage.setItem(\"userId\",userId);\r\n        localStorage.setItem(\"username\",username);\r\n        console.log(\"User ID:\", userId);\r\n        console.log(\"Username:\", username);\r\n\r\n        return { userId, username }; // Returnează informațiile\r\n      } catch (error) {\r\n        console.error(\"Eroare la decodarea JWT-ului:\", error);\r\n        return null;\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Stil pentru formularul de logare */\r\n</style>\r\n"],"mappings":";AAmBA,SAASA,SAAQ,IAAKC,YAAW,QAAS,iBAAiB;AAC3D,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPN,SAASA,CAAA,EAAG;MACV,MAAMO,KAAI,GAAI;QACZJ,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,QAAQ,EAAE,IAAI,CAACA;MACjB,CAAC;MACDH,YAAY,CAACM,KAAK,EACfC,IAAI,CAACC,QAAO,IAAK;QAChBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,QAAQ,CAACP,IAAI,CAAC;QACnD;QACAU,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEJ,QAAQ,CAACP,IAAI,CAAC;QAC/C;QACD;QACC,IAAI,CAACG,OAAM,GAAI,wBAAwB;QACvC,IAAI,CAACS,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;QACtB;MACF,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QACdP,OAAO,CAACO,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,IAAI,CAACZ,OAAM,GAAI,oDAAoD;MACrE,CAAC,CAAC;IACN,CAAC;IACDa,WAAWA,CAAA,EAAG;MACZ,MAAMC,KAAI,GAAIP,YAAY,CAACQ,OAAO,CAAC,UAAU,CAAC,EAAE;;MAEhD,IAAI,CAACD,KAAK,EAAE;QACVT,OAAO,CAACO,KAAK,CAAC,wBAAwB,CAAC;QACvC,OAAO,IAAI;MACb;MAEA,IAAI;QACF,MAAMI,YAAW,GAAIC,SAAS,CAACH,KAAK,CAAC,EAAE;QACvC,MAAMI,MAAK,GAAIF,YAAY,CAACE,MAAM,EAAE;QACpC,MAAMC,QAAO,GAAIH,YAAY,CAACI,GAAG,EAAE;QACnCb,YAAY,CAACC,OAAO,CAAC,QAAQ,EAACU,MAAM,CAAC;QACrCX,YAAY,CAACC,OAAO,CAAC,UAAU,EAACW,QAAQ,CAAC;QACzCd,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEY,MAAM,CAAC;QAC/Bb,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEa,QAAQ,CAAC;QAElC,OAAO;UAAED,MAAM;UAAEC;QAAS,CAAC,EAAE;MAC/B,EAAE,OAAOP,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,OAAO,IAAI;MACb;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}