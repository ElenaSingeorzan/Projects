{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 2\n};\nconst _hoisted_4 = {\n  key: 3\n};\nconst _hoisted_5 = {\n  key: 4\n};\nconst _hoisted_6 = {\n  key: 5\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PostItem = _resolveComponent(\"PostItem\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Postările mele\", -1 /* HOISTED */)), _createCommentVNode(\" Postări Publicate \"), _cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Postări Publicate\", -1 /* HOISTED */)), $options.publishedPosts.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.publishedPosts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createVNode(_component_PostItem, {\n      post: post,\n      onUpdatePost: $options.handleUpdatePost,\n      onRemovePost: $options.handleRemovePost,\n      onAddComment: $options.handleAddComment\n    }, null, 8 /* PROPS */, [\"post\", \"onUpdatePost\", \"onRemovePost\", \"onAddComment\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Nicio postare publicată.\")), _createCommentVNode(\" Postări Pending \"), _cache[2] || (_cache[2] = _createElementVNode(\"h2\", null, \"Postări în Așteptare\", -1 /* HOISTED */)), $options.pendingPosts.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.pendingPosts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createVNode(_component_PostItem, {\n      post: post,\n      onRemovePost: $options.handleRemovePost\n    }, null, 8 /* PROPS */, [\"post\", \"onRemovePost\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \"Nicio postare în așteptare.\")), _createCommentVNode(\" Postări Șterse \"), _cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"Postări Șterse\", -1 /* HOISTED */)), $options.removedPosts.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.removedPosts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createVNode(_component_PostItem, {\n      post: post\n    }, null, 8 /* PROPS */, [\"post\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \"Nicio postare ștearsă.\"))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_createCommentVNode","$options","publishedPosts","length","_hoisted_1","_Fragment","_renderList","post","id","_createVNode","_component_PostItem","onUpdatePost","handleUpdatePost","onRemovePost","handleRemovePost","onAddComment","handleAddComment","_hoisted_2","pendingPosts","_hoisted_3","_hoisted_4","removedPosts","_hoisted_5","_hoisted_6"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\UsersPosts.vue"],"sourcesContent":["<!-- <template>\r\n    <div>\r\n      <h1>Postările mele</h1>\r\n      <div v-for=\"post in posts\" :key=\"post.id\">\r\n      <PostItem\r\n        :post=\"post\"\r\n        @update-post=\"handleUpdatePost\"\r\n        @remove-post=\"handleRemovePost\"\r\n        @add-comment=\"handleAddComment\"\r\n      />\r\n    </div>\r\n  </div>\r\n  </template> -->\r\n  <template>\r\n    <div>\r\n      <h1>Postările mele</h1>\r\n  \r\n      <!-- Postări Publicate -->\r\n      <h2>Postări Publicate</h2>\r\n      <div v-if=\"publishedPosts.length\">\r\n        <div v-for=\"post in publishedPosts\" :key=\"post.id\">\r\n          <PostItem\r\n            :post=\"post\"\r\n            @update-post=\"handleUpdatePost\"\r\n            @remove-post=\"handleRemovePost\"\r\n            @add-comment=\"handleAddComment\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <p v-else>Nicio postare publicată.</p>\r\n  \r\n      <!-- Postări Pending -->\r\n      <h2>Postări în Așteptare</h2>\r\n      <div v-if=\"pendingPosts.length\">\r\n        <div v-for=\"post in pendingPosts\" :key=\"post.id\">\r\n          <PostItem\r\n            :post=\"post\"\r\n            @remove-post=\"handleRemovePost\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <p v-else>Nicio postare în așteptare.</p>\r\n <!-- Postări Șterse -->\r\n <h2>Postări Șterse</h2>\r\n    <div v-if=\"removedPosts.length\">\r\n      <div v-for=\"post in removedPosts\" :key=\"post.id\">\r\n        <PostItem\r\n          :post=\"post\"\r\n          \r\n        />\r\n      </div>\r\n    </div>\r\n    <p v-else>Nicio postare ștearsă.</p>\r\n  </div>\r\n</template>\r\n  \r\n  <script>\r\n  import { getPostsforUser, updatePost, deletePost, addComment } from \"../services/api\";\r\n  import PostItem from './PostItem.vue';\r\n  export default {\r\n    components: {\r\n      PostItem\r\n    },\r\n    data() {\r\n      return {\r\n        posts: [], \r\n        newComment: \"\",\r\n         message: \"\"\r\n      };\r\n    },\r\n    computed: {\r\n    publishedPosts() {\r\n      return this.posts.filter(post => post.status === 'PUBLISHED');\r\n    },\r\n    pendingPosts() {\r\n      return this.posts.filter(post => post.status === 'PENDING');\r\n    },\r\n    removedPosts() {\r\n      return this.posts.filter(post => post.status === 'REMOVED');\r\n    }\r\n  },\r\n    methods: {\r\n        fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n\r\n      getPostsforUser(token)\r\n        .then(response => {\r\n          this.posts = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Eroare la preluarea postărilor:', error);\r\n        });\r\n    },\r\n       handleUpdatePost(post) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n         updatePost(post.id, post, token);\r\n          alert(\"Postare actualizată!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la actualizarea postării:\", error);\r\n        }\r\n      },\r\n       handleRemovePost(postId) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n           deletePost(postId, token);\r\n          alert(\"Postare ștearsă!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la ștergerea postării:\", error);\r\n        }\r\n      },\r\n      handleAddComment(postId, newComment) {\r\n        const token = localStorage.getItem('jwtToken');\r\n        console.log(\"Comentariu trimis:\", newComment);\r\n        const commentData = {\r\n        content: newComment,\r\n      };\r\n      \r\n      addComment(postId, commentData, token)\r\n    .then(response => {\r\n      console.log(\"Comentariu creat:\", response.data);\r\n      alert('Comentariu adăugat!');\r\n      this.fetchPosts();\r\n    })\r\n    .catch(error => {\r\n      console.error('Eroare la adăugarea comentariului:', error);\r\n    });\r\n}\r\n    },\r\n    mounted() {\r\n      this.fetchPosts(); // Încarcă postările la montare\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBAcIC,mBAAA,CAuCI,c,0BAtCFC,mBAAA,CAAuB,YAAnB,gBAAc,sBAElBC,mBAAA,uBAA0B,E,0BAC1BD,mBAAA,CAA0B,YAAtB,mBAAiB,sBACVE,QAAA,CAAAC,cAAc,CAACC,MAAM,I,cAAhCL,mBAAA,CASM,OA5BZM,UAAA,I,kBAoBQN,mBAAA,CAOMO,SAAA,QA3BdC,WAAA,CAoB4BL,QAAA,CAAAC,cAAc,EAAtBK,IAAI;yBAAhBT,mBAAA,CAOM;MAP+BD,GAAG,EAAEU,IAAI,CAACC;QAC7CC,YAAA,CAKEC,mBAAA;MAJCH,IAAI,EAAEA,IAAI;MACVI,YAAW,EAAEV,QAAA,CAAAW,gBAAgB;MAC7BC,YAAW,EAAEZ,QAAA,CAAAa,gBAAgB;MAC7BC,YAAW,EAAEd,QAAA,CAAAe;;qDAIpBlB,mBAAA,CAAsC,KA7B5CmB,UAAA,EA6BgB,0BAAwB,IAElCjB,mBAAA,qBAAwB,E,0BACxBD,mBAAA,CAA6B,YAAzB,sBAAoB,sBACbE,QAAA,CAAAiB,YAAY,CAACf,MAAM,I,cAA9BL,mBAAA,CAOM,OAxCZqB,UAAA,I,kBAkCQrB,mBAAA,CAKMO,SAAA,QAvCdC,WAAA,CAkC4BL,QAAA,CAAAiB,YAAY,EAApBX,IAAI;yBAAhBT,mBAAA,CAKM;MAL6BD,GAAG,EAAEU,IAAI,CAACC;QAC3CC,YAAA,CAGEC,mBAAA;MAFCH,IAAI,EAAEA,IAAI;MACVM,YAAW,EAAEZ,QAAA,CAAAa;;qDAIpBhB,mBAAA,CAAyC,KAzC/CsB,UAAA,EAyCgB,6BAA2B,IAC1CpB,mBAAA,oBAAuB,E,0BACvBD,mBAAA,CAAuB,YAAnB,gBAAc,sBACJE,QAAA,CAAAoB,YAAY,CAAClB,MAAM,I,cAA9BL,mBAAA,CAOM,OAnDVwB,UAAA,I,kBA6CMxB,mBAAA,CAKMO,SAAA,QAlDZC,WAAA,CA6C0BL,QAAA,CAAAoB,YAAY,EAApBd,IAAI;yBAAhBT,mBAAA,CAKM;MAL6BD,GAAG,EAAEU,IAAI,CAACC;QAC3CC,YAAA,CAGEC,mBAAA;MAFCH,IAAI,EAAEA;IAAI,kC;qDAKjBT,mBAAA,CAAoC,KApDxCyB,UAAA,EAoDc,wBAAsB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}