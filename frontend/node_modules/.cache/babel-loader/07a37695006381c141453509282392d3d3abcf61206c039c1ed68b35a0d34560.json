{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", null, \"Creează o postare nouă\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.submitPost && $options.submitPost(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"label\", {\n    for: \"title\"\n  }, \"Titlu:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.title = $event),\n    id: \"title\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.title]])]), _createElementVNode(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"content\"\n  }, \"Conținut:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.content = $event),\n    id: \"content\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.content]])]), _cache[5] || (_cache[5] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Creează Postare\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","submitPost","for","type","$event","$data","title","id","required","content"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostForm.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Creează o postare nouă</h1>\r\n      <form @submit.prevent=\"submitPost\">\r\n        <div>\r\n          <label for=\"title\">Titlu:</label>\r\n          <input type=\"text\" v-model=\"title\" id=\"title\" required />\r\n        </div>\r\n        <div>\r\n          <label for=\"content\">Conținut:</label>\r\n          <textarea v-model=\"content\" id=\"content\" required></textarea>\r\n        </div>\r\n        <button type=\"submit\">Creează Postare</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { createPost } from '../services/api';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        title: '',\r\n        content: '',\r\n        userId: 1 // Ex: ID-ul unui utilizator logat\r\n      };\r\n    },\r\n    methods: {\r\n      submitPost() {\r\n        const newPost = {\r\n          title: this.title,\r\n          content: this.content,\r\n          user: { id: this.userId },\r\n          status: 'PENDING'\r\n        };\r\n  \r\n        createPost(newPost)\r\n          .then(response => {\r\n            console.log(\"Postare creată:\", response.data);\r\n            this.$router.push('/posts');\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Eroare la crearea postării:\", error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  "],"mappings":";;uBACIA,mBAAA,CAaM,c,0BAZJC,mBAAA,CAA+B,YAA3B,wBAAsB,sBAC1BA,mBAAA,CAUO;IAVAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHnBC,cAAA,KAAAC,IAAA,KAG6BC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BJ,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAiC;IAA1BO,GAAG,EAAC;EAAO,GAAC,QAAM,sB,gBACzBP,mBAAA,CAAyD;IAAlDQ,IAAI,EAAC,MAAM;IAN5B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAMsCC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IAAEG,EAAE,EAAC,OAAO;IAACC,QAAQ,EAAR;iDAAlBH,KAAA,CAAAC,KAAK,E,KAEnCX,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAsC;IAA/BO,GAAG,EAAC;EAAS,GAAC,WAAS,sB,gBAC9BP,mBAAA,CAA6D;IAVvE,uBAAAE,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAU6BC,KAAA,CAAAI,OAAO,GAAAL,MAAA;IAAEG,EAAE,EAAC,SAAS;IAACC,QAAQ,EAAR;iDAAtBH,KAAA,CAAAI,OAAO,E,+BAE5Bd,mBAAA,CAA8C;IAAtCQ,IAAI,EAAC;EAAQ,GAAC,iBAAe,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}