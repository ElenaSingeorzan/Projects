{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, Fragment as _Fragment, renderList as _renderList } from \"vue\";\nconst _hoisted_1 = {\n  class: \"post-item\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 2\n};\nconst _hoisted_5 = {\n  key: 3\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleDetails && $options.toggleDetails(...args))\n  }, _toDisplayString($props.post.title), 1 /* TEXT */), $data.showDetails ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" Afișare formular dacă este în modul de editare \"), $data.isEditing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[10] || (_cache[10] = _createElementVNode(\"h3\", null, \"Edit Post\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.editedTitle = $event),\n    placeholder: \"Edit title\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.editedTitle]]), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.editedContent = $event),\n    placeholder: \"Edit content\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.editedContent]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.saveEdit && $options.saveEdit(...args))\n  }, \"Save\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.cancelEdit && $options.cancelEdit(...args))\n  }, \"Cancel\")])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Afișare detalii postare dacă nu este în modul de editare \"), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString($props.post.content), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[11] || (_cache[11] = _createElementVNode(\"strong\", null, \"Autor:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($props.post.authorName), 1 /* TEXT */)]), _createCommentVNode(\" Butoane pentru acțiuni \"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.startEdit && $options.startEdit(...args))\n  }, \"Update Post\"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.removePost && $options.removePost(...args))\n  }, \"Remove\"), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.toggleCommentForm && $options.toggleCommentForm(...args))\n  }, \"Add Comment\")])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" Formular de adăugare comentariu \"), $data.showCommentForm ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $data.newComment = $event),\n    placeholder: \"Scrie un comentariu\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newComment]]), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.addComment && $options.addComment(...args))\n  }, \"Submit Comment\")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Listă comentarii \"), $props.post.comments && $props.post.comments.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[12] || (_cache[12] = _createElementVNode(\"h4\", null, \"Comments:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.post.comments, (comment, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, _toDisplayString(comment), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","toggleDetails","$props","post","title","$data","showDetails","_hoisted_2","_createCommentVNode","isEditing","_hoisted_3","$event","editedTitle","placeholder","editedContent","saveEdit","cancelEdit","_Fragment","_toDisplayString","content","_createTextVNode","authorName","startEdit","removePost","toggleCommentForm","showCommentForm","_hoisted_4","newComment","addComment","comments","length","_hoisted_5","_renderList","comment","index"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostItem.vue"],"sourcesContent":["<!-- PostItem.vue \r\n<template>\r\n    <div class=\"post-item\">\r\n      <h2 @click=\"toggleDetails\">{{ post.title }}</h2>\r\n      \r\n      <div v-if=\"showDetails\">\r\n          \r\n          <!-- Afișare detalii \r\n        <p v-if=\"!isEditing\">{{ post.content }}</p>\r\n        <p v-if=\"!isEditing\"><strong>Autor:</strong> {{ post.authorName }}</p>\r\n\r\n        <!-- Formular de editare \r\n        <div v-if=\"isEditing\">\r\n          <h3>Edit Post</h3>\r\n          <input v-model=\"editedTitle\" placeholder=\"Edit title\" />\r\n          <textarea v-model=\"editedContent\" placeholder=\"Edit content\"></textarea>\r\n          <button @click=\"saveEdit\">Save</button>\r\n          <button @click=\"cancelEdit\">Cancel</button>\r\n        </div>\r\n        <div v-else>\r\n        <p>{{ post.content }}</p>\r\n        <p><strong>Autor:</strong> {{ post.authorName }}</p>\r\n\r\n        <!-- Butoanele pentru operațiile asupra postării \r\n        <button @click=\"updatePost\">Update</button>\r\n        <button @click=\"removePost\">Remove</button>\r\n        <button @click=\"toggleCommentForm\">Add Comment</button>\r\n        </div>\r\n        <!-- Formular de adăugare comentariu, vizibil doar dacă userul alege acest lucru \r\n        <div v-if=\"showCommentForm\">\r\n          <textarea v-model=\"newComment\" placeholder=\"Scrie un comentariu\"></textarea>\r\n          <button @click=\"addComment\">Submit Comment</button>\r\n        </div>\r\n  \r\n        <!-- Listă comentarii \r\n        <div v-if=\"post.comments && post.comments.length\">\r\n          <h4>Comments:</h4>\r\n          <ul>\r\n            <li v-for=\"(comment, index) in post.comments\" :key=\"index\">{{ comment }}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n\r\n\r\n  <script>\r\n  export default {\r\n    props: {\r\n      post: {\r\n        type: Object,\r\n        required: true\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        showDetails: false,\r\n        showCommentForm: false,\r\n        newComment: '',\r\n        isEditing: false, // Starea de editare\r\n        editedTitle: '', // Titlu editat\r\n        editedContent: '' // Conținut editat\r\n      };\r\n    },\r\n    methods: {\r\n      toggleDetails() {\r\n        this.showDetails = !this.showDetails;\r\n      },\r\n      toggleCommentForm() {\r\n        this.showCommentForm = !this.showCommentForm;\r\n      },\r\n      updatePost() {\r\n        // Emită un eveniment pentru a notifica componenta părinte să actualizeze postarea\r\n        this.$emit('update-post', this.post);\r\n      },\r\n      startEdit() {\r\n      // Activează modul de editare și inițializează câmpurile de editare\r\n      this.isEditing = true;\r\n      this.editedTitle = this.post.title;\r\n      this.editedContent = this.post.content;\r\n    },\r\n    cancelEdit() {\r\n      // Dezactivează modul de editare fără a salva\r\n      this.isEditing = false;\r\n      this.editedTitle = '';\r\n      this.editedContent = '';\r\n    },\r\n    saveEdit() {\r\n      // Salvează modificările și trimite către părinte\r\n      if (this.editedTitle.trim() && this.editedContent.trim()) {\r\n        const updatedPost = {\r\n          ...this.post,\r\n          title: this.editedTitle,\r\n          content: this.editedContent\r\n        };\r\n        this.$emit('update-post', updatedPost);\r\n        this.isEditing = false;\r\n      }\r\n    },\r\n      removePost() {\r\n        // Emită un eveniment pentru a notifica componenta părinte să elimine postarea\r\n        this.$emit('remove-post', this.post.id);\r\n      },\r\n      addComment() {\r\n        if (this.newComment.trim()) {\r\n          this.$emit('add-comment', this.post.id, this.newComment);\r\n          this.newComment = '';\r\n          this.showCommentForm = false;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n-->\r\n<template>\r\n  <div class=\"post-item\">\r\n    <h2 @click=\"toggleDetails\">{{ post.title }}</h2>\r\n\r\n    <div v-if=\"showDetails\">\r\n      <!-- Afișare formular dacă este în modul de editare -->\r\n      <div v-if=\"isEditing\">\r\n        <h3>Edit Post</h3>\r\n        <input v-model=\"editedTitle\" placeholder=\"Edit title\" />\r\n        <textarea v-model=\"editedContent\" placeholder=\"Edit content\"></textarea>\r\n        <button @click=\"saveEdit\">Save</button>\r\n        <button @click=\"cancelEdit\">Cancel</button>\r\n      </div>\r\n      <!-- Afișare detalii postare dacă nu este în modul de editare -->\r\n      <div v-else>\r\n        <p>{{ post.content }}</p>\r\n        <p><strong>Autor:</strong> {{ post.authorName }}</p>\r\n\r\n        <!-- Butoane pentru acțiuni -->\r\n        <button @click=\"startEdit\">Update Post</button>\r\n        <button @click=\"removePost\">Remove</button>\r\n        <button @click=\"toggleCommentForm\">Add Comment</button>\r\n      </div>\r\n\r\n      <!-- Formular de adăugare comentariu -->\r\n      <div v-if=\"showCommentForm\">\r\n        <textarea v-model=\"newComment\" placeholder=\"Scrie un comentariu\"></textarea>\r\n        <button @click=\"addComment\">Submit Comment</button>\r\n      </div>\r\n\r\n      <!-- Listă comentarii -->\r\n      <div v-if=\"post.comments && post.comments.length\">\r\n        <h4>Comments:</h4>\r\n        <ul>\r\n          <li v-for=\"(comment, index) in post.comments\" :key=\"index\">{{ comment }}</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    post: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      showDetails: false,\r\n      showCommentForm: false,\r\n      isEditing: false, // Modul de editare activ/inactiv\r\n      editedTitle: '', // Titlu temporar pentru editare\r\n      editedContent: '', // Conținut temporar pentru editare\r\n      newComment: '' // Comentariu nou\r\n    };\r\n  },\r\n  methods: {\r\n    toggleDetails() {\r\n      this.showDetails = !this.showDetails;\r\n    },\r\n    toggleCommentForm() {\r\n      this.showCommentForm = !this.showCommentForm;\r\n    },\r\n    startEdit() {\r\n      // Activează modul de editare și pre-populează datele\r\n      this.isEditing = true;\r\n      this.editedTitle = this.post.title;\r\n      this.editedContent = this.post.content;\r\n    },\r\n    cancelEdit() {\r\n      // Dezactivează modul de editare fără a salva modificările\r\n      this.isEditing = false;\r\n    },\r\n    saveEdit() {\r\n      // Verifică validitatea datelor și trimite modificările\r\n      if (this.editedTitle.trim() && this.editedContent.trim()) {\r\n        const updatedPost = {\r\n          id: this.post.id,\r\n          title: this.editedTitle,\r\n          content: this.editedContent\r\n        };\r\n        this.$emit('update-post', updatedPost); // Notifică părintele\r\n        this.isEditing = false; // Închide formularul de editare\r\n      } else {\r\n        alert('Title and content cannot be empty!');\r\n      }\r\n    },\r\n    removePost() {\r\n      this.$emit('remove-post', this.post.id);\r\n    },\r\n    addComment() {\r\n      if (this.newComment.trim()) {\r\n        this.$emit('add-comment', this.post.id, this.newComment);\r\n        this.newComment = '';\r\n        this.showCommentForm = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n <style scoped>\r\n  .post-item {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    margin: 10px 0;\r\n  }\r\n  h2 {\r\n    cursor: pointer;\r\n  }\r\n  textarea {\r\n    width: 100%;\r\n    margin-top: 10px;\r\n  }\r\n  /* Adaugă stiluri pentru formularul de editare */\r\ntextarea, input {\r\n  display: block;\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  padding: 8px;\r\n  font-size: 1rem;\r\n}\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}