{"ast":null,"code":"const api = axios.create({\n  baseURL: 'http://localhost:8081' // URL-ul backend-ului tău Spring Boot\n});\nexport const registerUser = userData => {\n  return api.post('/users', userData);\n};\nexport const loginUser = userData => {\n  return api.post('/login', userData);\n};\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8081';\n\n// Retrieve the token from localStorage\nconst token = localStorage.getItem('jwtToken');\nconsole.log(token);\nexport const getPosts = token => {\n  return axios.get(`${API_URL}/posts`, {\n    headers: {\n      Authorization: `Bearer ${token}` // Correct header for authorization\n    }\n  });\n};\nexport const createPost = (postData, token) => {\n  return axios.post(`${API_URL}/posts`, postData, {\n    headers: {\n      Authorization: `Bearer ${token}` // Asigură-te că token-ul este trimis corect\n    }\n  });\n};\nexport const updatePost = (postId, postData, token) => {\n  return axios.put(`${API_URL}/posts/${postId}`, postData, {\n    headers: {\n      Authorization: `Bearer ${token}` // Trimite token-ul\n    }\n  });\n};\nexport const deletePost = (postId, token) => {\n  return axios.delete(`${API_URL}/posts/${postId}`, {\n    headers: {\n      Authorization: `Bearer ${token}` // Trimite token-ul\n    }\n  });\n};\nexport const addComment = (postId, comment, token) => {\n  const data = {\n    content: comment\n  }; // Define data with content\n  return axios.post(`${API_URL}/posts/${postId}/comments`, data, {\n    headers: {\n      Authorization: `Bearer ${token}` // Ensure token is sent correctly\n    }\n  }).then(response => {\n    console.log('Comment added successfully!', response.data);\n  }).catch(error => {\n    console.error('Error adding comment:', error.response ? error.response.data : error);\n  });\n};","map":{"version":3,"names":["api","axios","create","baseURL","registerUser","userData","post","loginUser","API_URL","token","localStorage","getItem","console","log","getPosts","get","headers","Authorization","createPost","postData","updatePost","postId","put","deletePost","delete","addComment","comment","data","content","then","response","catch","error"],"sources":["C:/Users/Elena/Desktop/an4/sem1/SCD/Proiect/frontend/src/services/api.js"],"sourcesContent":["const api = axios.create({\r\n    baseURL: 'http://localhost:8081', // URL-ul backend-ului tău Spring Boot\r\n});\r\n\r\n\r\nexport const registerUser = (userData) => {\r\n    return api.post('/users', userData);\r\n};\r\nexport const loginUser = (userData) => {\r\n    return api.post('/login', userData);\r\n};\r\n\r\nimport axios from 'axios';\r\nconst API_URL = 'http://localhost:8081';\r\n\r\n\r\n// Retrieve the token from localStorage\r\nconst token = localStorage.getItem('jwtToken');\r\n\r\nconsole.log(token);\r\n\r\nexport const getPosts = (token) => {\r\n    return axios.get(`${API_URL}/posts`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`, // Correct header for authorization\r\n        },\r\n    });\r\n};\r\n\r\n\r\nexport const createPost = (postData, token) => {\r\n    return axios.post(`${API_URL}/posts`, postData, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`, // Asigură-te că token-ul este trimis corect\r\n        },\r\n    });\r\n};\r\nexport const updatePost = (postId, postData, token) => {\r\n  return axios.put(`${API_URL}/posts/${postId}`, postData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`, // Trimite token-ul\r\n    },\r\n  });\r\n};\r\n\r\nexport const deletePost = (postId, token) => {\r\n  return axios.delete(`${API_URL}/posts/${postId}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`, // Trimite token-ul\r\n    },\r\n  });\r\n};\r\nexport const addComment = (postId, comment, token) => {\r\n  const data = { content: comment };  // Define data with content\r\n  return axios.post(`${API_URL}/posts/${postId}/comments`, data, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`, // Ensure token is sent correctly\r\n    },\r\n  })\r\n  .then(response => {\r\n    console.log('Comment added successfully!', response.data);\r\n  })\r\n  .catch(error => {\r\n    console.error('Error adding comment:', error.response ? error.response.data : error);\r\n  });\r\n};\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,KAAK,CAACC,MAAM,CAAC;EACrBC,OAAO,EAAE,uBAAuB,CAAE;AACtC,CAAC,CAAC;AAGF,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EACtC,OAAOL,GAAG,CAACM,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;AACvC,CAAC;AACD,OAAO,MAAME,SAAS,GAAIF,QAAQ,IAAK;EACnC,OAAOL,GAAG,CAACM,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;AACvC,CAAC;AAED,OAAOJ,KAAK,MAAM,OAAO;AACzB,MAAMO,OAAO,GAAG,uBAAuB;;AAGvC;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;AAE9CC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;AAElB,OAAO,MAAMK,QAAQ,GAAIL,KAAK,IAAK;EAC/B,OAAOR,KAAK,CAACc,GAAG,CAAC,GAAGP,OAAO,QAAQ,EAAE;IACjCQ,OAAO,EAAE;MACLC,aAAa,EAAE,UAAUR,KAAK,EAAE,CAAE;IACtC;EACJ,CAAC,CAAC;AACN,CAAC;AAGD,OAAO,MAAMS,UAAU,GAAGA,CAACC,QAAQ,EAAEV,KAAK,KAAK;EAC3C,OAAOR,KAAK,CAACK,IAAI,CAAC,GAAGE,OAAO,QAAQ,EAAEW,QAAQ,EAAE;IAC5CH,OAAO,EAAE;MACLC,aAAa,EAAE,UAAUR,KAAK,EAAE,CAAE;IACtC;EACJ,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMW,UAAU,GAAGA,CAACC,MAAM,EAAEF,QAAQ,EAAEV,KAAK,KAAK;EACrD,OAAOR,KAAK,CAACqB,GAAG,CAAC,GAAGd,OAAO,UAAUa,MAAM,EAAE,EAAEF,QAAQ,EAAE;IACvDH,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUR,KAAK,EAAE,CAAE;IACpC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMc,UAAU,GAAGA,CAACF,MAAM,EAAEZ,KAAK,KAAK;EAC3C,OAAOR,KAAK,CAACuB,MAAM,CAAC,GAAGhB,OAAO,UAAUa,MAAM,EAAE,EAAE;IAChDL,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUR,KAAK,EAAE,CAAE;IACpC;EACF,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMgB,UAAU,GAAGA,CAACJ,MAAM,EAAEK,OAAO,EAAEjB,KAAK,KAAK;EACpD,MAAMkB,IAAI,GAAG;IAAEC,OAAO,EAAEF;EAAQ,CAAC,CAAC,CAAE;EACpC,OAAOzB,KAAK,CAACK,IAAI,CAAC,GAAGE,OAAO,UAAUa,MAAM,WAAW,EAAEM,IAAI,EAAE;IAC7DX,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUR,KAAK,EAAE,CAAE;IACpC;EACF,CAAC,CAAC,CACDoB,IAAI,CAACC,QAAQ,IAAI;IAChBlB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEiB,QAAQ,CAACH,IAAI,CAAC;EAC3D,CAAC,CAAC,CACDI,KAAK,CAACC,KAAK,IAAI;IACdpB,OAAO,CAACoB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACH,IAAI,GAAGK,KAAK,CAAC;EACtF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}