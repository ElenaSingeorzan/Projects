{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"h1\", null, \"Lista Postări\", -1 /* HOISTED */)), _createCommentVNode(\" <ul>\\r\\n      <li v-for=\\\"post in posts\\\" :key=\\\"post.id\\\">{{ post.title }}</li>\\r\\n    </ul> \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id,\n      class: \"post\"\n    }, [_createElementVNode(\"h3\", {\n      onClick: $event => $options.toggleDetails(post.id)\n    }, [_createTextVNode(_toDisplayString(post.title) + \" - \", 1 /* TEXT */), _createElementVNode(\"small\", null, \"Creata de: \" + _toDisplayString(post.user.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_1), _createCommentVNode(\" Detalii postare - Conținut și comentarii \"), post.showDetails ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, _toDisplayString(post.content), 1 /* TEXT */), _cache[0] || (_cache[0] = _createElementVNode(\"h4\", null, \"Comentarii:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(post.comments, comment => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: comment.id\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(comment.user.name) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(comment.content), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Mesaj de eroare \"), $data.message ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, _toDisplayString($data.message), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_createCommentVNode","_Fragment","_renderList","$data","posts","post","id","class","onClick","$event","$options","toggleDetails","_createTextVNode","_toDisplayString","title","user","name","_hoisted_1","showDetails","_hoisted_2","content","comments","comment","message","_hoisted_3"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Lista Postări</h1>\r\n    <!-- <ul>\r\n      <li v-for=\"post in posts\" :key=\"post.id\">{{ post.title }}</li>\r\n    </ul> -->\r\n    <div v-for=\"post in posts\" :key=\"post.id\" class=\"post\">\r\n      <h3 @click=\"toggleDetails(post.id)\">\r\n        {{ post.title }} - <small>Creata de: {{ post.user.name }}</small>\r\n      </h3>\r\n      \r\n      <!-- Detalii postare - Conținut și comentarii -->\r\n      <div v-if=\"post.showDetails\">\r\n        <p>{{ post.content }}</p>\r\n        <h4>Comentarii:</h4>\r\n        <ul>\r\n          <li v-for=\"comment in post.comments\" :key=\"comment.id\">\r\n            <strong>{{ comment.user.name }}:</strong> {{ comment.content }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <!-- Mesaj de eroare -->\r\n    <p v-if=\"message\">{{ message }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getPosts } from '../services/api'; // Importă funcția specifică\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      posts: [],\r\n      message: '',\r\n    };\r\n  },\r\n  methods: {\r\n  fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n\r\n      // if (token) {\r\n      //   getPosts(token) // Trimite token-ul în cerere\r\n      //     .then(response => {\r\n      //       this.posts = response.data; // Setează postările obținute\r\n      //     })\r\n      //     .catch(error => {\r\n      //       console.error('Eroare la preluarea postărilor:', error);\r\n      //     });\r\n      // } else {\r\n      //   console.error('Token-ul nu este disponibil');\r\n      // }\r\n      if (token) {\r\n        getPosts(token) // Trimite token-ul în cerere\r\n          .then(response => {\r\n            this.posts = response.data.map(post => {\r\n              // Adăugăm un atribut pentru a controla afișarea detaliilor\r\n              post.showDetails = false;\r\n              return post;\r\n            });\r\n          })\r\n          .catch(error => {\r\n            console.error('Eroare la preluarea postărilor:', error);\r\n            this.message = 'Nu am putut încărca postările.';\r\n          });\r\n      } else {\r\n        console.error('Token-ul nu este disponibil');\r\n        this.message = 'Te rog să te loghezi pentru a vizualiza postările.';\r\n      }\r\n    },\r\n // Funcția pentru a arăta sau ascunde detaliile postării (conținut și comentarii)\r\n toggleDetails(postId) {\r\n      const post = this.posts.find(p => p.id === postId);\r\n      if (post) {\r\n        post.showDetails = !post.showDetails; // Schimbă starea detaliilor\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchPosts(); // Apelează fetchPosts atunci când componenta este montată\r\n  }\r\n  }\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Stiluri pentru a arăta postările și detaliile acestora */\r\n.post {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nh3 {\r\n  cursor: pointer;\r\n  color: #007BFF;\r\n}\r\n\r\nh3:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nsmall {\r\n  font-size: 0.9em;\r\n  color: gray;\r\n}\r\n\r\np {\r\n  font-size: 1.1em;\r\n}\r\n\r\nh4 {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":";mBAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAuBM,c,0BAtBJC,mBAAA,CAAsB,YAAlB,eAAa,sBACjBC,mBAAA,mGAES,G,kBACTF,mBAAA,CAeMG,SAAA,QArBVC,WAAA,CAMwBC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAhBP,mBAAA,CAeM;MAfsBD,GAAG,EAAEQ,IAAI,CAACC,EAAE;MAAEC,KAAK,EAAC;QAC9CR,mBAAA,CAEK;MAFAS,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,aAAa,CAACN,IAAI,CAACC,EAAE;QAPvCM,gBAAA,CAAAC,gBAAA,CAQWR,IAAI,CAACS,KAAK,IAAG,KAAG,iBAAAf,mBAAA,CAA8C,eAAvC,aAAW,GAAAc,gBAAA,CAAGR,IAAI,CAACU,IAAI,CAACC,IAAI,iB,iBAR9DC,UAAA,GAWMjB,mBAAA,8CAAiD,EACtCK,IAAI,CAACa,WAAW,I,cAA3BpB,mBAAA,CAQM,OApBZqB,UAAA,GAaQpB,mBAAA,CAAyB,WAAAc,gBAAA,CAAnBR,IAAI,CAACe,OAAO,kB,0BAClBrB,mBAAA,CAAoB,YAAhB,aAAW,sBACfA,mBAAA,CAIK,c,kBAHHD,mBAAA,CAEKG,SAAA,QAlBfC,WAAA,CAgBgCG,IAAI,CAACgB,QAAQ,EAAxBC,OAAO;2BAAlBxB,mBAAA,CAEK;QAFiCD,GAAG,EAAEyB,OAAO,CAAChB;UACjDP,mBAAA,CAAyC,gBAAAc,gBAAA,CAA9BS,OAAO,CAACP,IAAI,CAACC,IAAI,IAAG,GAAC,iBAjB5CJ,gBAAA,CAiBqD,GAAC,GAAAC,gBAAA,CAAGS,OAAO,CAACF,OAAO,iB;0CAjBxEpB,mBAAA,e;kCAsBIA,mBAAA,qBAAwB,EACfG,KAAA,CAAAoB,OAAO,I,cAAhBzB,mBAAA,CAAmC,KAvBvC0B,UAAA,EAAAX,gBAAA,CAuByBV,KAAA,CAAAoB,OAAO,oBAvBhCvB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}