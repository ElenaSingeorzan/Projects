{"ast":null,"code":"import { getPostsforUser, updatePost, deletePost, addComment } from \"../services/api\";\nimport PostItem from './PostItem.vue';\nexport default {\n  components: {\n    PostItem\n  },\n  data() {\n    return {\n      posts: [],\n      newCommentContent: \"\",\n      message: \"\"\n    };\n  },\n  methods: {\n    fetchPosts() {\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\n\n      getPostsforUser(token).then(response => {\n        this.posts = response.data;\n      }).catch(error => {\n        console.error('Eroare la preluarea postărilor:', error);\n      });\n    },\n    handleUpdatePost(post) {\n      const token = localStorage.getItem(\"jwtToken\");\n      try {\n        updatePost(post.id, post, token);\n        alert(\"Postare actualizată!\");\n        this.fetchPosts(); // Reîncarcă lista\n      } catch (error) {\n        console.error(\"Eroare la actualizarea postării:\", error);\n      }\n    },\n    handleRemovePost(postId) {\n      const token = localStorage.getItem(\"jwtToken\");\n      try {\n        deletePost(postId, token);\n        alert(\"Postare ștearsă!\");\n        this.fetchPosts(); // Reîncarcă lista\n      } catch (error) {\n        console.error(\"Eroare la ștergerea postării:\", error);\n      }\n    },\n    handleAddComment(postId, newComment) {\n      const token = localStorage.getItem('jwtToken');\n      const commentData = {\n        content: this.newCommentContent\n      };\n      addComment(postId, commentData, token).then(response => {\n        console.log(\"Comentariu creat:\", response.data);\n        alert('Comentariu adăugat!');\n        this.fetchPosts();\n      }).catch(error => {\n        console.error('Eroare la adăugarea comentariului:', error);\n      });\n    }\n  },\n  mounted() {\n    this.fetchPosts(); // Încarcă postările la montare\n  }\n};","map":{"version":3,"names":["getPostsforUser","updatePost","deletePost","addComment","PostItem","components","data","posts","newCommentContent","message","methods","fetchPosts","token","localStorage","getItem","then","response","catch","error","console","handleUpdatePost","post","id","alert","handleRemovePost","postId","handleAddComment","newComment","commentData","content","log","mounted"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\UsersPosts.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Postările mele</h1>\r\n      <div v-for=\"post in posts\" :key=\"post.id\">\r\n      <PostItem\r\n        :post=\"post\"\r\n        @update-post=\"handleUpdatePost\"\r\n        @remove-post=\"handleRemovePost\"\r\n        @add-comment=\"handleAddComment\"\r\n      />\r\n    </div>\r\n  </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { getPostsforUser, updatePost, deletePost, addComment } from \"../services/api\";\r\n  import PostItem from './PostItem.vue';\r\n  export default {\r\n    components: {\r\n      PostItem\r\n    },\r\n    data() {\r\n      return {\r\n        posts: [], \r\n        newCommentContent: \"\",\r\n         message: \"\"\r\n      };\r\n    },\r\n    methods: {\r\n        fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n\r\n      getPostsforUser(token)\r\n        .then(response => {\r\n          this.posts = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Eroare la preluarea postărilor:', error);\r\n        });\r\n    },\r\n       handleUpdatePost(post) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n         updatePost(post.id, post, token);\r\n          alert(\"Postare actualizată!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la actualizarea postării:\", error);\r\n        }\r\n      },\r\n       handleRemovePost(postId) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n           deletePost(postId, token);\r\n          alert(\"Postare ștearsă!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la ștergerea postării:\", error);\r\n        }\r\n      },\r\n      handleAddComment(postId, newComment) {\r\n        const token = localStorage.getItem('jwtToken');\r\n        const commentData = {\r\n        content: this.newCommentContent,\r\n        \r\n      };\r\n      \r\n      addComment(postId, commentData, token)\r\n    .then(response => {\r\n      console.log(\"Comentariu creat:\", response.data);\r\n      alert('Comentariu adăugat!');\r\n      this.fetchPosts();\r\n    })\r\n    .catch(error => {\r\n      console.error('Eroare la adăugarea comentariului:', error);\r\n    });\r\n}\r\n    },\r\n    mounted() {\r\n      this.fetchPosts(); // Încarcă postările la montare\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":"AAeE,SAASA,eAAe,EAAEC,UAAU,EAAEC,UAAU,EAAEC,UAAS,QAAS,iBAAiB;AACrF,OAAOC,QAAO,MAAO,gBAAgB;AACrC,eAAe;EACbC,UAAU,EAAE;IACVD;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,iBAAiB,EAAE,EAAE;MACpBC,OAAO,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACLC,UAAUA,CAAA,EAAG;MACf,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,EAAE;;MAEhDd,eAAe,CAACY,KAAK,EAClBG,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACT,KAAI,GAAIS,QAAQ,CAACV,IAAI;MAC5B,CAAC,EACAW,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD,CAAC,CAAC;IACN,CAAC;IACEE,gBAAgBA,CAACC,IAAI,EAAE;MACtB,MAAMT,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,IAAI;QACHb,UAAU,CAACoB,IAAI,CAACC,EAAE,EAAED,IAAI,EAAET,KAAK,CAAC;QAC/BW,KAAK,CAAC,sBAAsB,CAAC;QAC7B,IAAI,CAACZ,UAAU,CAAC,CAAC,EAAE;MACrB,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IACAM,gBAAgBA,CAACC,MAAM,EAAE;MACxB,MAAMb,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,IAAI;QACDZ,UAAU,CAACuB,MAAM,EAAEb,KAAK,CAAC;QAC1BW,KAAK,CAAC,kBAAkB,CAAC;QACzB,IAAI,CAACZ,UAAU,CAAC,CAAC,EAAE;MACrB,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IACDQ,gBAAgBA,CAACD,MAAM,EAAEE,UAAU,EAAE;MACnC,MAAMf,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,MAAMc,WAAU,GAAI;QACpBC,OAAO,EAAE,IAAI,CAACrB;MAEhB,CAAC;MAEDL,UAAU,CAACsB,MAAM,EAAEG,WAAW,EAAEhB,KAAK,EACtCG,IAAI,CAACC,QAAO,IAAK;QAChBG,OAAO,CAACW,GAAG,CAAC,mBAAmB,EAAEd,QAAQ,CAACV,IAAI,CAAC;QAC/CiB,KAAK,CAAC,qBAAqB,CAAC;QAC5B,IAAI,CAACZ,UAAU,CAAC,CAAC;MACnB,CAAC,EACAM,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D,CAAC,CAAC;IACN;EACI,CAAC;EACDa,OAAOA,CAAA,EAAG;IACR,IAAI,CAACpB,UAAU,CAAC,CAAC,EAAE;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}