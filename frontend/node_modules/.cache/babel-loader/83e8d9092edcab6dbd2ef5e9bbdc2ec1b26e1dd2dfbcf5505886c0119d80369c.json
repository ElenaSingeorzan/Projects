{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"h2\", null, \"Login\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.loginUser && $options.loginUser(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"label\", {\n    for: \"email\"\n  }, \"Email\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]])]), _createElementVNode(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"password\"\n  }, \"Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])]), _cache[5] || (_cache[5] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Login\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), $data.message ? (_openBlock(), _createElementBlock(\"p\", _hoisted_1, _toDisplayString($data.message), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","loginUser","for","type","$event","$data","email","required","password","message","_hoisted_1","_toDisplayString","_createCommentVNode"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\UserLogin.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Login</h2>\r\n    <form @submit.prevent=\"loginUser\">\r\n      <div>\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"email\" v-model=\"email\" required />\r\n      </div>\r\n      <div>\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" v-model=\"password\" required />\r\n      </div>\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n    <p v-if=\"message\">{{ message }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { loginUser as apiLoginUser } from '../services/api';\r\nexport default {\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      message: ''\r\n    };\r\n  },\r\n  methods: {\r\n    loginUser() {\r\n      const login = {\r\n        email: this.email,\r\n        password: this.password\r\n      };\r\n      apiLoginUser(login)\r\n        .then(response => {\r\n          console.log(\"Autentificare reusita\", response.data);\r\n          // Salvează token-ul în localStorage\r\n          localStorage.setItem('jwtToken', response.data);\r\n          //getUserInfo()\r\n         // localStorage.setItem(\"userId\", userId); \r\n          this.message = \"Autentificare reușită!\";\r\n          this.$router.push('/');\r\n          // Redirecționează utilizatorul sau fă alte acțiuni\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Eroare la autentificare\", error);\r\n          this.message = \"Autentificare eșuată! Verifică email-ul și parola.\";\r\n        });\r\n    },\r\n    getUserInfo() {\r\n      const token = localStorage.getItem(\"jwtToken\"); // Obține token-ul din localStorage\r\n\r\n      if (!token) {\r\n        console.error(\"Token-ul JWT lipsește!\");\r\n        return null;\r\n      }\r\n\r\n      try {\r\n        const decodedToken = jwtDecode(token); // Decodează token-ul\r\n        const userId = decodedToken.userId; // Extrage userId\r\n        const username = decodedToken.sub; // Extrage username-ul (dacă sub=subject este folosit pentru username)\r\n        localStorage.setItem(\"userId\",userId);\r\n        localStorage.setItem(\"username\",username);\r\n        console.log(\"User ID:\", userId);\r\n        console.log(\"Username:\", username);\r\n\r\n        return { userId, username }; // Returnează informațiile\r\n      } catch (error) {\r\n        console.error(\"Eroare la decodarea JWT-ului:\", error);\r\n        return null;\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Stil pentru formularul de logare */\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAcM,c,0BAbJC,mBAAA,CAAc,YAAV,OAAK,sBACTA,mBAAA,CAUO;IAVAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;MAC9BJ,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAgC;IAAzBO,GAAG,EAAC;EAAO,GAAC,OAAK,sB,gBACxBP,mBAAA,CAA+C;IAAxCQ,IAAI,EAAC,OAAO;IAN3B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAMqCC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IAAEG,QAAQ,EAAR;iDAAPF,KAAA,CAAAC,KAAK,E,KAEpCX,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAsC;IAA/BO,GAAG,EAAC;EAAU,GAAC,UAAQ,sB,gBAC9BP,mBAAA,CAAqD;IAA9CQ,IAAI,EAAC,UAAU;IAV9B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAUwCC,KAAA,CAAAG,QAAQ,GAAAJ,MAAA;IAAEG,QAAQ,EAAR;iDAAVF,KAAA,CAAAG,QAAQ,E,+BAE1Cb,mBAAA,CAAoC;IAA5BQ,IAAI,EAAC;EAAQ,GAAC,OAAK,qB,4BAEpBE,KAAA,CAAAI,OAAO,I,cAAhBf,mBAAA,CAAmC,KAdvCgB,UAAA,EAAAC,gBAAA,CAcyBN,KAAA,CAAAI,OAAO,oBAdhCG,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}