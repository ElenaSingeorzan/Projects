{"ast":null,"code":"import { fetchPosts, updatePost, deletePost } from \"../services/api\";\nexport default {\n  components: {\n    PostCard: () => import(\"./PostCard.vue\") // Componentă pentru fiecare postare\n  },\n  data() {\n    return {\n      posts: [] // Lista postărilor\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      const token = localStorage.getItem(\"jwtToken\");\n      try {\n        const response = await fetchPosts(token);\n        this.posts = response.data;\n      } catch (error) {\n        console.error(\"Eroare la încărcarea postărilor:\", error);\n      }\n    },\n    async handleUpdatePost(post) {\n      const token = localStorage.getItem(\"jwtToken\");\n      try {\n        await updatePost(post.id, post, token);\n        alert(\"Postare actualizată!\");\n        this.fetchPosts(); // Reîncarcă lista\n      } catch (error) {\n        console.error(\"Eroare la actualizarea postării:\", error);\n      }\n    },\n    async handleRemovePost(postId) {\n      const token = localStorage.getItem(\"jwtToken\");\n      try {\n        await deletePost(postId, token);\n        alert(\"Postare ștearsă!\");\n        this.fetchPosts(); // Reîncarcă lista\n      } catch (error) {\n        console.error(\"Eroare la ștergerea postării:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts(); // Încarcă postările la montare\n  }\n};","map":{"version":3,"names":["fetchPosts","updatePost","deletePost","components","PostCard","data","posts","methods","token","localStorage","getItem","response","error","console","handleUpdatePost","post","id","alert","handleRemovePost","postId","mounted"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\UsersPosts.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>My Posts</h1>\r\n      <PostCard\r\n        v-for=\"post in posts\"\r\n        :key=\"post.id\"\r\n        :post=\"post\"\r\n        @update-post=\"handleUpdatePost\"\r\n        @remove-post=\"handleRemovePost\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { fetchPosts, updatePost, deletePost } from \"../services/api\";\r\n  \r\n  export default {\r\n    components: {\r\n      PostCard: () => import(\"./PostCard.vue\"), // Componentă pentru fiecare postare\r\n    },\r\n    data() {\r\n      return {\r\n        posts: [], // Lista postărilor\r\n      };\r\n    },\r\n    methods: {\r\n      async fetchPosts() {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n          const response = await fetchPosts(token);\r\n          this.posts = response.data;\r\n        } catch (error) {\r\n          console.error(\"Eroare la încărcarea postărilor:\", error);\r\n        }\r\n      },\r\n      async handleUpdatePost(post) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n          await updatePost(post.id, post, token);\r\n          alert(\"Postare actualizată!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la actualizarea postării:\", error);\r\n        }\r\n      },\r\n      async handleRemovePost(postId) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n          await deletePost(postId, token);\r\n          alert(\"Postare ștearsă!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la ștergerea postării:\", error);\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.fetchPosts(); // Încarcă postările la montare\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":"AAcE,SAASA,UAAU,EAAEC,UAAU,EAAEC,UAAS,QAAS,iBAAiB;AAEpE,eAAe;EACbC,UAAU,EAAE;IACVC,QAAQ,EAAEA,CAAA,KAAM,MAAM,CAAC,gBAAgB,CAAC,CAAE;EAC5C,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE,CAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMP,UAAUA,CAAA,EAAG;MACjB,MAAMQ,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMX,UAAU,CAACQ,KAAK,CAAC;QACxC,IAAI,CAACF,KAAI,GAAIK,QAAQ,CAACN,IAAI;MAC5B,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IACD,MAAME,gBAAgBA,CAACC,IAAI,EAAE;MAC3B,MAAMP,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,IAAI;QACF,MAAMT,UAAU,CAACc,IAAI,CAACC,EAAE,EAAED,IAAI,EAAEP,KAAK,CAAC;QACtCS,KAAK,CAAC,sBAAsB,CAAC;QAC7B,IAAI,CAACjB,UAAU,CAAC,CAAC,EAAE;MACrB,EAAE,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IACD,MAAMM,gBAAgBA,CAACC,MAAM,EAAE;MAC7B,MAAMX,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,IAAI;QACF,MAAMR,UAAU,CAACiB,MAAM,EAAEX,KAAK,CAAC;QAC/BS,KAAK,CAAC,kBAAkB,CAAC;QACzB,IAAI,CAACjB,UAAU,CAAC,CAAC,EAAE;MACrB,EAAE,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;EACF,CAAC;EACDQ,OAAOA,CAAA,EAAG;IACR,IAAI,CAACpB,UAAU,CAAC,CAAC,EAAE;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}