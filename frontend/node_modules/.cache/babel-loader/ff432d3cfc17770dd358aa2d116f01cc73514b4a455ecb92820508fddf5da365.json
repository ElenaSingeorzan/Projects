{"ast":null,"code":"const api = axios.create({\n  baseURL: 'http://localhost:8081' // URL-ul backend-ului tău Spring Boot\n});\nexport const registerUser = userData => {\n  return api.post('/users', userData);\n};\nexport const loginUser = userData => {\n  return api.post('/login', userData);\n};\nimport axios from 'axios';\n\n// Retrieve the token from localStorage\nconst token = localStorage.getItem('token');\nexport const getPosts = () => {\n  return axios.get('http://localhost:8081/posts', {\n    headers: {\n      Authorization: `Bearer ${token}` // Correct header for authorization\n    }\n  });\n};\nexport const createPost = (postData, token) => {\n  return axios.post('http://localhost:8081/posts', postData, {\n    headers: {\n      Authorization: `Bearer ${token}` // Asigură-te că token-ul este trimis corect\n    }\n  });\n};","map":{"version":3,"names":["api","axios","create","baseURL","registerUser","userData","post","loginUser","token","localStorage","getItem","getPosts","get","headers","Authorization","createPost","postData"],"sources":["C:/Users/Elena/Desktop/an4/sem1/SCD/Proiect/frontend/src/services/api.js"],"sourcesContent":["const api = axios.create({\r\n    baseURL: 'http://localhost:8081', // URL-ul backend-ului tău Spring Boot\r\n});\r\n\r\n\r\nexport const registerUser = (userData) => {\r\n    return api.post('/users', userData);\r\n};\r\nexport const loginUser = (userData) => {\r\n    return api.post('/login', userData);\r\n};\r\n\r\nimport axios from 'axios';\r\n\r\n// Retrieve the token from localStorage\r\nconst token = localStorage.getItem('token');\r\n\r\nexport const getPosts = () => {\r\n    return axios.get('http://localhost:8081/posts', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`, // Correct header for authorization\r\n        },\r\n    });\r\n};\r\n\r\n\r\nexport const createPost = (postData, token) => {\r\n    return axios.post('http://localhost:8081/posts', postData, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`, // Asigură-te că token-ul este trimis corect\r\n        },\r\n    });\r\n};"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,KAAK,CAACC,MAAM,CAAC;EACrBC,OAAO,EAAE,uBAAuB,CAAE;AACtC,CAAC,CAAC;AAGF,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EACtC,OAAOL,GAAG,CAACM,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;AACvC,CAAC;AACD,OAAO,MAAME,SAAS,GAAIF,QAAQ,IAAK;EACnC,OAAOL,GAAG,CAACM,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;AACvC,CAAC;AAED,OAAOJ,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAE3C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC1B,OAAOV,KAAK,CAACW,GAAG,CAAC,6BAA6B,EAAE;IAC5CC,OAAO,EAAE;MACLC,aAAa,EAAE,UAAUN,KAAK,EAAE,CAAE;IACtC;EACJ,CAAC,CAAC;AACN,CAAC;AAGD,OAAO,MAAMO,UAAU,GAAGA,CAACC,QAAQ,EAAER,KAAK,KAAK;EAC3C,OAAOP,KAAK,CAACK,IAAI,CAAC,6BAA6B,EAAEU,QAAQ,EAAE;IACvDH,OAAO,EAAE;MACLC,aAAa,EAAE,UAAUN,KAAK,EAAE,CAAE;IACtC;EACJ,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}