{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PostItem = _resolveComponent(\"PostItem\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Postările mele\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createVNode(_component_PostItem, {\n      post: post,\n      onUpdatePost: $options.handleUpdatePost,\n      onRemovePost: $options.handleRemovePost,\n      onAddComment: $options.handleAddComment\n    }, null, 8 /* PROPS */, [\"post\", \"onUpdatePost\", \"onRemovePost\", \"onAddComment\"])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","posts","post","key","id","_createVNode","_component_PostItem","onUpdatePost","$options","handleUpdatePost","onRemovePost","handleRemovePost","onAddComment","handleAddComment"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\UsersPosts.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Postările mele</h1>\r\n      <div v-for=\"post in posts\" :key=\"post.id\">\r\n      <PostItem\r\n        :post=\"post\"\r\n        @update-post=\"handleUpdatePost\"\r\n        @remove-post=\"handleRemovePost\"\r\n        @add-comment=\"handleAddComment\"\r\n      />\r\n    </div>\r\n  </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { getPostsforUser, updatePost, deletePost, addComment } from \"../services/api\";\r\n  import PostItem from './PostItem.vue';\r\n  export default {\r\n    components: {\r\n      PostItem\r\n    },\r\n    data() {\r\n      return {\r\n        posts: [], \r\n      };\r\n    },\r\n    methods: {\r\n        fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n\r\n      getPostsforUser(token)\r\n        .then(response => {\r\n          this.posts = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Eroare la preluarea postărilor:', error);\r\n        });\r\n    },\r\n       handleUpdatePost(post) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n         updatePost(post.id, post, token);\r\n          alert(\"Postare actualizată!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la actualizarea postării:\", error);\r\n        }\r\n      },\r\n       handleRemovePost(postId) {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        try {\r\n           deletePost(postId, token);\r\n          alert(\"Postare ștearsă!\");\r\n          this.fetchPosts(); // Reîncarcă lista\r\n        } catch (error) {\r\n          console.error(\"Eroare la ștergerea postării:\", error);\r\n        }\r\n      },\r\n      handleAddComment(postId) {\r\n        const token = localStorage.getItem('jwtToken');\r\n        //const userId= localStorage.getItem('userId');\r\n        const commentData = {\r\n        content: this.newCommentContent,\r\n        // post: { id: postId },\r\n        // user: { id:  userId}, // Adaugă ID-ul utilizatorului logat\r\n      };\r\n      \r\n    addComment(postId, commentData, token)\r\n      .then(() => {\r\n        alert('Comentariu adăugat!');\r\n        this.fetchPosts();\r\n      })\r\n      .then(response => {\r\n          console.log(\"Comentariu creat:\", response);\r\n          this.message = \"Comentariu creat cu succes!\";\r\n        })\r\n      .catch(error => {\r\n        console.error('Eroare la adăugarea comentariului:', error);\r\n        this.message = \"Eroare la crearea comentariului.\";\r\n      });\r\n  }\r\n    },\r\n    mounted() {\r\n      this.fetchPosts(); // Încarcă postările la montare\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";;;uBACIA,mBAAA,CAUI,c,0BATFC,mBAAA,CAAuB,YAAnB,gBAAc,uB,kBAClBD,mBAAA,CAOIE,SAAA,QAVVC,WAAA,CAG0BC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAhBN,mBAAA,CAOI;MAPwBO,GAAG,EAAED,IAAI,CAACE;QACtCC,YAAA,CAKEC,mBAAA;MAJCJ,IAAI,EAAEA,IAAI;MACVK,YAAW,EAAEC,QAAA,CAAAC,gBAAgB;MAC7BC,YAAW,EAAEF,QAAA,CAAAG,gBAAgB;MAC7BC,YAAW,EAAEJ,QAAA,CAAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}