{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PostItem1 = _resolveComponent(\"PostItem1\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Lista Postări\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createVNode(_component_PostItem1, {\n      post: post,\n      onAddComment: $options.handleAddComment\n    }, null, 8 /* PROPS */, [\"post\", \"onAddComment\"])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","posts","post","key","id","_createVNode","_component_PostItem1","onAddComment","$options","handleAddComment"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Lista Postări</h1>\r\n    <div v-for=\"post in posts\" :key=\"post.id\">\r\n      <PostItem1\r\n        :post=\"post\"\r\n        @add-comment=\"handleAddComment\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport PostItem1 from './PostItem1.vue';\r\nimport { getPosts, addComment } from '../services/api'; \r\n\r\nexport default {\r\n  components: {\r\n    PostItem1\r\n  },\r\n  data() {\r\n    return {\r\n      posts: [],\r\n      newComment: \"\",\r\n      message: '',\r\n    };\r\n  },\r\n  methods: {\r\n  fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); \r\n\r\n      getPosts(token)\r\n        .then(response => {\r\n          this.posts = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Eroare la preluarea postărilor:', error);\r\n        });\r\n    },\r\n  handleAddComment(postId,newComment) {\r\n    const token = localStorage.getItem('jwtToken');\r\n        console.log(\"Comentariu trimis:\", newComment);\r\n        const commentData = {\r\n        content: newComment,\r\n      };\r\n      \r\n      addComment(postId, commentData, token)\r\n    .then(response => {\r\n      console.log(\"Comentariu creat:\", response.data);\r\n      alert('Comentariu adăugat!');\r\n      this.fetchPosts();\r\n    })\r\n    .catch(error => {\r\n      console.error('Eroare la adăugarea comentariului:', error);\r\n    });\r\n}\r\n    },\r\n  mounted() {\r\n    this.fetchPosts();\r\n  }\r\n};\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Stiluri pentru a arăta postările și detaliile acestora */\r\n.post {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nh3 {\r\n  cursor: pointer;\r\n  color: #007BFF;\r\n}\r\n\r\nh3:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nsmall {\r\n  font-size: 0.9em;\r\n  color: gray;\r\n}\r\n\r\np {\r\n  font-size: 1.1em;\r\n}\r\n\r\nh4 {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":";;;uBACEA,mBAAA,CAQM,c,0BAPJC,mBAAA,CAAsB,YAAlB,eAAa,uB,kBACjBD,mBAAA,CAKME,SAAA,QARVC,WAAA,CAGwBC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAhBN,mBAAA,CAKM;MALsBO,GAAG,EAAED,IAAI,CAACE;QACpCC,YAAA,CAGEC,oBAAA;MAFCJ,IAAI,EAAEA,IAAI;MACVK,YAAW,EAAEC,QAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}