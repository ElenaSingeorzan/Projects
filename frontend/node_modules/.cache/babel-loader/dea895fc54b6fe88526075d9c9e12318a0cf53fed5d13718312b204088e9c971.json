{"ast":null,"code":"export default {\n  props: {\n    post: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showDetails: false,\n      showCommentForm: false,\n      isEditing: false,\n      // Modul de editare activ/inactiv\n      editedTitle: '',\n      // Titlu temporar pentru editare\n      editedContent: '',\n      // Conținut temporar pentru editare\n      newComment: '' // Comentariu nou\n    };\n  },\n  methods: {\n    toggleDetails() {\n      this.showDetails = !this.showDetails;\n    },\n    toggleCommentForm() {\n      this.showCommentForm = !this.showCommentForm;\n    },\n    startEdit() {\n      // Activează modul de editare și pre-populează datele\n      this.isEditing = true;\n      this.editedTitle = this.post.title;\n      this.editedContent = this.post.content;\n    },\n    cancelEdit() {\n      // Dezactivează modul de editare fără a salva modificările\n      this.isEditing = false;\n    },\n    saveEdit() {\n      // Verifică validitatea datelor și trimite modificările\n      if (this.editedTitle.trim() && this.editedContent.trim()) {\n        const updatedPost = {\n          id: this.post.id,\n          title: this.editedTitle,\n          content: this.editedContent\n        };\n        this.$emit('update-post', updatedPost); // Notifică părintele\n        this.isEditing = false; // Închide formularul de editare\n      } else {\n        alert('Title and content cannot be empty!');\n      }\n    },\n    removePost() {\n      this.$emit('remove-post', this.post.id);\n    },\n    emitAddComment() {\n      if (this.newComment.trim()) {\n        this.$emit('add-comment', this.post.id, this.newComment);\n        this.newComment = \"\"; // Resetează textarea\n      } else {\n        alert(\"Comentariul nu poate fi gol!\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","post","type","Object","required","data","showDetails","showCommentForm","isEditing","editedTitle","editedContent","newComment","methods","toggleDetails","toggleCommentForm","startEdit","title","content","cancelEdit","saveEdit","trim","updatedPost","id","$emit","alert","removePost","emitAddComment"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostItem.vue"],"sourcesContent":["\r\n<template>\r\n  <div class=\"post-item\">\r\n    <h2 @click=\"toggleDetails\">{{ post.title }}</h2>\r\n\r\n    <div v-if=\"showDetails\">\r\n      <!-- Afișare formular dacă este în modul de editare -->\r\n      <div v-if=\"isEditing\">\r\n        <h3>Edit Post</h3>\r\n        <input v-model=\"editedTitle\" placeholder=\"Edit title\" />\r\n        <textarea v-model=\"editedContent\" placeholder=\"Edit content\"></textarea>\r\n        <button @click=\"saveEdit\">Save</button>\r\n        <button @click=\"cancelEdit\">Cancel</button>\r\n      </div>\r\n      <!-- Afișare detalii postare dacă nu este în modul de editare -->\r\n      <div v-else>\r\n        <p>{{ post.content }}</p>\r\n        <p><strong>Autor:</strong> {{ post.authorName }}</p>\r\n\r\n        <!-- Butoane pentru acțiuni -->\r\n        <button @click=\"startEdit\">Update Post</button>\r\n        <button @click=\"removePost\">Remove</button>\r\n        <button @click=\"toggleCommentForm\">Add Comment</button>\r\n      </div>\r\n\r\n      <!-- Formular de adăugare comentariu -->\r\n      <div v-if=\"showCommentForm\">\r\n        <textarea v-model=\"newComment\" placeholder=\"Scrie un comentariu\"></textarea>\r\n        <button @click=\"emitAddComment\">Submit Comment</button>\r\n      </div>\r\n\r\n      <!-- Listă comentarii -->\r\n      <div v-if=\"post.comments && post.comments.length\">\r\n        <h4>Comments:</h4>\r\n        <ul>\r\n          <li v-for=\"(comment, index) in post.comments\" :key=\"index\">{{ comment }}</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    post: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      showDetails: false,\r\n      showCommentForm: false,\r\n      isEditing: false, // Modul de editare activ/inactiv\r\n      editedTitle: '', // Titlu temporar pentru editare\r\n      editedContent: '', // Conținut temporar pentru editare\r\n      newComment: '' // Comentariu nou\r\n    };\r\n  },\r\n  methods: {\r\n    toggleDetails() {\r\n      this.showDetails = !this.showDetails;\r\n    },\r\n    toggleCommentForm() {\r\n      this.showCommentForm = !this.showCommentForm;\r\n    },\r\n    startEdit() {\r\n      // Activează modul de editare și pre-populează datele\r\n      this.isEditing = true;\r\n      this.editedTitle = this.post.title;\r\n      this.editedContent = this.post.content;\r\n    },\r\n    cancelEdit() {\r\n      // Dezactivează modul de editare fără a salva modificările\r\n      this.isEditing = false;\r\n    },\r\n    saveEdit() {\r\n      // Verifică validitatea datelor și trimite modificările\r\n      if (this.editedTitle.trim() && this.editedContent.trim()) {\r\n        const updatedPost = {\r\n          id: this.post.id,\r\n          title: this.editedTitle,\r\n          content: this.editedContent\r\n        };\r\n        this.$emit('update-post', updatedPost); // Notifică părintele\r\n        this.isEditing = false; // Închide formularul de editare\r\n      } else {\r\n        alert('Title and content cannot be empty!');\r\n      }\r\n    },\r\n    removePost() {\r\n      this.$emit('remove-post', this.post.id);\r\n    },\r\n    emitAddComment() {\r\n    if (this.newComment.trim()) {\r\n      this.$emit('add-comment', this.post.id, this.newComment);\r\n      this.newComment = \"\"; // Resetează textarea\r\n    } else {\r\n      alert(\"Comentariul nu poate fi gol!\");\r\n    }\r\n  }\r\n}\r\n};\r\n</script>\r\n\r\n <style scoped>\r\n  .post-item {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    margin: 10px 0;\r\n  }\r\n  h2 {\r\n    cursor: pointer;\r\n  }\r\n  textarea {\r\n    width: 100%;\r\n    margin-top: 10px;\r\n  }\r\n  /* Adaugă stiluri pentru formularul de editare */\r\ntextarea, input {\r\n  display: block;\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  padding: 8px;\r\n  font-size: 1rem;\r\n}\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n  </style>\r\n  "],"mappings":"AA2CA,eAAe;EACbA,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE,KAAK;MACtBC,SAAS,EAAE,KAAK;MAAE;MAClBC,WAAW,EAAE,EAAE;MAAE;MACjBC,aAAa,EAAE,EAAE;MAAE;MACnBC,UAAU,EAAE,EAAC,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAAA,EAAG;MACd,IAAI,CAACP,WAAU,GAAI,CAAC,IAAI,CAACA,WAAW;IACtC,CAAC;IACDQ,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACP,eAAc,GAAI,CAAC,IAAI,CAACA,eAAe;IAC9C,CAAC;IACDQ,SAASA,CAAA,EAAG;MACV;MACA,IAAI,CAACP,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACC,WAAU,GAAI,IAAI,CAACR,IAAI,CAACe,KAAK;MAClC,IAAI,CAACN,aAAY,GAAI,IAAI,CAACT,IAAI,CAACgB,OAAO;IACxC,CAAC;IACDC,UAAUA,CAAA,EAAG;MACX;MACA,IAAI,CAACV,SAAQ,GAAI,KAAK;IACxB,CAAC;IACDW,QAAQA,CAAA,EAAG;MACT;MACA,IAAI,IAAI,CAACV,WAAW,CAACW,IAAI,CAAC,KAAK,IAAI,CAACV,aAAa,CAACU,IAAI,CAAC,CAAC,EAAE;QACxD,MAAMC,WAAU,GAAI;UAClBC,EAAE,EAAE,IAAI,CAACrB,IAAI,CAACqB,EAAE;UAChBN,KAAK,EAAE,IAAI,CAACP,WAAW;UACvBQ,OAAO,EAAE,IAAI,CAACP;QAChB,CAAC;QACD,IAAI,CAACa,KAAK,CAAC,aAAa,EAAEF,WAAW,CAAC,EAAE;QACxC,IAAI,CAACb,SAAQ,GAAI,KAAK,EAAE;MAC1B,OAAO;QACLgB,KAAK,CAAC,oCAAoC,CAAC;MAC7C;IACF,CAAC;IACDC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACF,KAAK,CAAC,aAAa,EAAE,IAAI,CAACtB,IAAI,CAACqB,EAAE,CAAC;IACzC,CAAC;IACDI,cAAcA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACf,UAAU,CAACS,IAAI,CAAC,CAAC,EAAE;QAC1B,IAAI,CAACG,KAAK,CAAC,aAAa,EAAE,IAAI,CAACtB,IAAI,CAACqB,EAAE,EAAE,IAAI,CAACX,UAAU,CAAC;QACxD,IAAI,CAACA,UAAS,GAAI,EAAE,EAAE;MACxB,OAAO;QACLa,KAAK,CAAC,8BAA8B,CAAC;MACvC;IACF;EACF;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}