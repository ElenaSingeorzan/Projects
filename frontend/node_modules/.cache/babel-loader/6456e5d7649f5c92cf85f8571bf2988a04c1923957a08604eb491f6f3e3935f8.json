{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PostItem = _resolveComponent(\"PostItem\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Lista Postări\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createVNode(_component_PostItem, {\n      post: post,\n      onUpdatePost: $options.handleUpdatePost,\n      onRemovePost: $options.handleRemovePost,\n      onAddComment: $options.handleAddComment\n    }, null, 8 /* PROPS */, [\"post\", \"onUpdatePost\", \"onRemovePost\", \"onAddComment\"])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","posts","post","key","id","_createVNode","_component_PostItem","onUpdatePost","$options","handleUpdatePost","onRemovePost","handleRemovePost","onAddComment","handleAddComment"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Lista Postări</h1>\r\n    <div v-for=\"post in posts\" :key=\"post.id\">\r\n      <PostItem\r\n        :post=\"post\"\r\n        @update-post=\"handleUpdatePost\"\r\n        @remove-post=\"handleRemovePost\"\r\n        @add-comment=\"handleAddComment\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport PostItem from './PostItem.vue';\r\nimport { getPosts, updatePost, deletePost, addComment } from '../services/api'; // Importă funcția specifică\r\n//import getUserInfo from \"../services/info\";\r\n\r\nexport default {\r\n  components: {\r\n    PostItem\r\n  },\r\n  data() {\r\n    return {\r\n      posts: [],\r\n      message: '',\r\n    };\r\n  },\r\n  methods: {\r\n  fetchPosts() {\r\n      const token = localStorage.getItem('jwtToken'); // Obține token-ul din localStorage\r\n\r\n      getPosts(token)\r\n        .then(response => {\r\n          this.posts = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Eroare la preluarea postărilor:', error);\r\n        });\r\n    },\r\n    handleUpdatePost(post) {\r\n    const token = localStorage.getItem('jwtToken');\r\n    updatePost(post.id, post, token)\r\n      .then(() => {\r\n        alert('Postare actualizată!');\r\n        this.fetchPosts();\r\n      })\r\n      .catch(error => {\r\n        console.error('Eroare la actualizarea postării:', error);\r\n      });\r\n  },\r\n  handleRemovePost(postId) {\r\n    const token = localStorage.getItem('jwtToken');\r\n    deletePost(postId, token)\r\n      .then(() => {\r\n        alert('Postare ștearsă!');\r\n        this.fetchPosts();\r\n      })\r\n      .catch(error => {\r\n        console.error('Eroare la ștergerea postării:', error);\r\n      });\r\n  },\r\n  handleAddComment(postId) {\r\n    const token = localStorage.getItem('jwtToken');\r\n    const userId= localStorage.getItem('userId');\r\n    const commentData = {\r\n    content: \"hei\",\r\n    post: { id: postId },\r\n    user: { id:  userId}, // Adaugă ID-ul utilizatorului logat\r\n};\r\n    addComment(postId, commentData, token)\r\n      // .then(() => {\r\n      //   alert('Comentariu adăugat!');\r\n      //   this.fetchPosts();\r\n      // })\r\n      .then(response => {\r\n          console.log(\"Comentariu creat:\", response.data);\r\n          this.message = \"Comentariu creat cu succes!\";\r\n        })\r\n      .catch(error => {\r\n        console.error('Eroare la adăugarea comentariului:', error);\r\n        this.message = \"Eroare la crearea comentariului.\";\r\n      });\r\n  }\r\n},\r\n  mounted() {\r\n    this.fetchPosts();\r\n  }\r\n};\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Stiluri pentru a arăta postările și detaliile acestora */\r\n.post {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nh3 {\r\n  cursor: pointer;\r\n  color: #007BFF;\r\n}\r\n\r\nh3:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nsmall {\r\n  font-size: 0.9em;\r\n  color: gray;\r\n}\r\n\r\np {\r\n  font-size: 1.1em;\r\n}\r\n\r\nh4 {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":";;;uBACEA,mBAAA,CAUM,c,0BATJC,mBAAA,CAAsB,YAAlB,eAAa,uB,kBACjBD,mBAAA,CAOME,SAAA,QAVVC,WAAA,CAGwBC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAhBN,mBAAA,CAOM;MAPsBO,GAAG,EAAED,IAAI,CAACE;QACpCC,YAAA,CAKEC,mBAAA;MAJCJ,IAAI,EAAEA,IAAI;MACVK,YAAW,EAAEC,QAAA,CAAAC,gBAAgB;MAC7BC,YAAW,EAAEF,QAAA,CAAAG,gBAAgB;MAC7BC,YAAW,EAAEJ,QAAA,CAAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}