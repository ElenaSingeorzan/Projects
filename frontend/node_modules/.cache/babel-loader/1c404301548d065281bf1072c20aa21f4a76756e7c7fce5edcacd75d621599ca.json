{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"post-item1\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleDetails && $options.toggleDetails(...args))\n  }, _toDisplayString($props.post.title), 1 /* TEXT */), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString($props.post.content), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Autor:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($props.post.authorName), 1 /* TEXT */)]), _createCommentVNode(\" Butoane pentru acțiuni \"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleCommentForm && $options.toggleCommentForm(...args))\n  }, \"Add Comment\")]), _createCommentVNode(\" Formular de adăugare comentariu \"), $data.showCommentForm ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.newComment = $event),\n    placeholder: \"Scrie un comentariu\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newComment]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.addComment && $options.addComment(...args))\n  }, \"Submit Comment\")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Listă comentarii \"), $props.post.comments && $props.post.comments.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"h4\", null, \"Comments:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.post.comments, (comment, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, _toDisplayString(comment), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","toggleDetails","$props","post","title","_toDisplayString","content","_createTextVNode","authorName","_createCommentVNode","toggleCommentForm","$data","showCommentForm","_hoisted_2","$event","newComment","placeholder","addComment","comments","length","_hoisted_3","_Fragment","_renderList","comment","index"],"sources":["C:\\Users\\Elena\\Desktop\\an4\\sem1\\SCD\\Proiect\\frontend\\src\\components\\PostItem1.vue"],"sourcesContent":["\r\n<template>\r\n    <div class=\"post-item1\">\r\n      <h2 @click=\"toggleDetails\">{{ post.title }}</h2>\r\n  \r\n      <div>\r\n          <p>{{ post.content }}</p>\r\n          <p><strong>Autor:</strong> {{ post.authorName }}</p>\r\n  \r\n          <!-- Butoane pentru acțiuni -->\r\n          <button @click=\"toggleCommentForm\">Add Comment</button>\r\n        </div>\r\n  \r\n        <!-- Formular de adăugare comentariu -->\r\n        <div v-if=\"showCommentForm\">\r\n          <textarea v-model=\"newComment\" placeholder=\"Scrie un comentariu\"></textarea>\r\n          <button @click=\"addComment\">Submit Comment</button>\r\n        </div>\r\n  \r\n        <!-- Listă comentarii -->\r\n        <div v-if=\"post.comments && post.comments.length\">\r\n          <h4>Comments:</h4>\r\n          <ul>\r\n            <li v-for=\"(comment, index) in post.comments\" :key=\"index\">{{ comment }}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    props: {\r\n      post: {\r\n        type: Object,\r\n        required: true\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        showDetails: false,\r\n        showCommentForm: false,\r\n        isEditing: false, // Modul de editare activ/inactiv\r\n        editedTitle: '', // Titlu temporar pentru editare\r\n        editedContent: '', // Conținut temporar pentru editare\r\n        newComment: '' // Comentariu nou\r\n      };\r\n    },\r\n    methods: {\r\n      toggleDetails() {\r\n        this.showDetails = !this.showDetails;\r\n      },\r\n      toggleCommentForm() {\r\n        this.showCommentForm = !this.showCommentForm;\r\n      },\r\n      startEdit() {\r\n        // Activează modul de editare și pre-populează datele\r\n        this.isEditing = true;\r\n        this.editedTitle = this.post.title;\r\n        this.editedContent = this.post.content;\r\n      },\r\n      cancelEdit() {\r\n        // Dezactivează modul de editare fără a salva modificările\r\n        this.isEditing = false;\r\n      },\r\n      saveEdit() {\r\n        // Verifică validitatea datelor și trimite modificările\r\n        if (this.editedTitle.trim() && this.editedContent.trim()) {\r\n          const updatedPost = {\r\n            id: this.post.id,\r\n            title: this.editedTitle,\r\n            content: this.editedContent\r\n          };\r\n          this.$emit('update-post', updatedPost); // Notifică părintele\r\n          this.isEditing = false; // Închide formularul de editare\r\n        } else {\r\n          alert('Title and content cannot be empty!');\r\n        }\r\n      },\r\n      removePost() {\r\n        this.$emit('remove-post', this.post.id);\r\n      },\r\n      addComment() {\r\n        if (this.newComment.trim()) {\r\n          this.$emit('add-comment', this.post.id, this.newComment);\r\n          this.newComment = '';\r\n          this.showCommentForm = false;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n   <style scoped>\r\n    .post-item {\r\n      border: 1px solid #ccc;\r\n      padding: 10px;\r\n      margin: 10px 0;\r\n    }\r\n    h2 {\r\n      cursor: pointer;\r\n    }\r\n    textarea {\r\n      width: 100%;\r\n      margin-top: 10px;\r\n    }\r\n    /* Adaugă stiluri pentru formularul de editare */\r\n  textarea, input {\r\n    display: block;\r\n    margin: 10px 0;\r\n    width: 100%;\r\n    padding: 8px;\r\n    font-size: 1rem;\r\n  }\r\n  button {\r\n    margin-right: 10px;\r\n  }\r\n    </style>\r\n    "],"mappings":";;EAESA,KAAK,EAAC;AAAY;;EAF3BC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBAEIC,mBAAA,CAwBQ,OAxBRC,UAwBQ,GAvBNC,mBAAA,CAAgD;IAA3CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;sBAAKG,MAAA,CAAAC,IAAI,CAACC,KAAK,kBAExCR,mBAAA,CAMQ,cALJA,mBAAA,CAAyB,WAAAS,gBAAA,CAAnBH,MAAA,CAAAC,IAAI,CAACG,OAAO,kBAClBV,mBAAA,CAAoD,Y,0BAAjDA,mBAAA,CAAuB,gBAAf,QAAM,sBAP3BW,gBAAA,CAOoC,GAAC,GAAAF,gBAAA,CAAGH,MAAA,CAAAC,IAAI,CAACK,UAAU,iB,GAE7CC,mBAAA,4BAA+B,EAC/Bb,mBAAA,CAAuD;IAA9CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAU,iBAAA,IAAAV,QAAA,CAAAU,iBAAA,IAAAX,IAAA,CAAiB;KAAE,aAAW,E,GAGhDU,mBAAA,qCAAwC,EAC7BE,KAAA,CAAAC,eAAe,I,cAA1BlB,mBAAA,CAGM,OAjBdmB,UAAA,G,gBAeUjB,mBAAA,CAA4E;IAftF,uBAAAE,MAAA,QAAAA,MAAA,MAAAgB,MAAA,IAe6BH,KAAA,CAAAI,UAAU,GAAAD,MAAA;IAAEE,WAAW,EAAC;iDAAxBL,KAAA,CAAAI,UAAU,E,GAC7BnB,mBAAA,CAAmD;IAA1CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAiB,UAAA,IAAAjB,QAAA,CAAAiB,UAAA,IAAAlB,IAAA,CAAU;KAAE,gBAAc,E,KAhBpDU,mBAAA,gBAmBQA,mBAAA,sBAAyB,EACdP,MAAA,CAAAC,IAAI,CAACe,QAAQ,IAAIhB,MAAA,CAAAC,IAAI,CAACe,QAAQ,CAACC,MAAM,I,cAAhDzB,mBAAA,CAKM,OAzBd0B,UAAA,G,0BAqBUxB,mBAAA,CAAkB,YAAd,WAAS,sBACbA,mBAAA,CAEK,c,kBADHF,mBAAA,CAA6E2B,SAAA,QAvBzFC,WAAA,CAuB2CpB,MAAA,CAAAC,IAAI,CAACe,QAAQ,EAvBxD,CAuBwBK,OAAO,EAAEC,KAAK;yBAA1B9B,mBAAA,CAA6E;MAA9BD,GAAG,EAAE+B;IAAK,GAAAnB,gBAAA,CAAKkB,OAAO;wCAvBjFd,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}